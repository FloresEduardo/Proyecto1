/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1;

import com.google.gson.Gson;
import com.sun.xml.internal.ws.client.ContentNegotiation;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import static proyecto1.Proyecto1.createDataset;
import static proyecto1.Proyecto1.createImage;

/**
 *
 * @author EduardoFlores
 */
public class Inicio extends javax.swing.JFrame implements KeyListener, MouseListener, ActionListener {

    //java -jar java-cup-11b.jar Sintactico.cup
    //java -jar JFlex.jar Lexico.flex
    
    //java -jar java-cup-11b.jar -parser parserJS -symbols symJS Sintacticojs.cup
    //java -jar JFlex.jar Lexicojs.flex
    
    public static String userCompu = "EduardoFlores";

    private JPanel contentPane;
    static String ruta = "";
    String texto = "";
    static String textoJS = "";
    int contPestanias = 0;
    String nombrePestaniaActual = "";
    public static ListaTokens listaTokens = new ListaTokens();
    public static ListaTokens listaErrores = new ListaTokens();
    public static ListaTokens listaTokensJS = new ListaTokens();
    public static ListaGlobales listaGlobales = new ListaGlobales();
    public static ListaComparacion listaComparacion = new ListaComparacion();
    public static List listaGraficas = new ArrayList();
    public static List grafiacasPie = new ArrayList();
    public static List grafiacasBarras = new ArrayList();
    public static List grafiacasLineas = new ArrayList();
    public static String graficaResumen = "";
    public static DateTimeFormatter date = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
    public static int contGraficas = 0;
    public static String rutaProyecto1;
    public static String rutaProyecto2;
    public static List<NodoEspecifico> listaNodosEspecificos = new ArrayList<>();
    public static double puntajeGeneral;
    
    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        //limpiarTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelPrincipal = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblLinea = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblColumna = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jArbol2 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jArbol1 = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnAbrir = new javax.swing.JMenuItem();
        btnGuardar = new javax.swing.JMenuItem();
        btnGuardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JMenuItem();
        btnEliminarActual = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        btnEjecutar = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        btnReportes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));

        panelPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelPrincipalMousePressed(evt);
            }
        });

        txtConsola.setEditable(false);
        txtConsola.setColumns(20);
        txtConsola.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        txtConsola.setRows(5);
        jScrollPane1.setViewportView(txtConsola);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setText("Linea:");

        jLabel6.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel6.setText("Consola");

        lblLinea.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setText("Columna:");

        lblColumna.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel5.setText("Editor");

        jScrollPane2.setViewportView(jArbol2);

        jArbol1.setEditable(true);
        jScrollPane3.setViewportView(jArbol1);

        jLabel2.setText("PROYECTO 1");

        jLabel4.setText("PROYECTO 2");

        btnLimpiar.setText("Limpiar Consola");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        btnAbrir.setText("Abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(btnAbrir);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(btnGuardar);

        btnGuardarComo.setText("Guardar Como");
        btnGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(btnGuardarComo);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Pesta√±as");

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jMenu2.add(btnNuevo);

        btnEliminarActual.setText("Eliminar Actual");
        btnEliminarActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActualActionPerformed(evt);
            }
        });
        jMenu2.add(btnEliminarActual);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ejecutar");

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        jMenu3.add(btnEjecutar);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Reportes");

        btnReportes.setText("Generar Reportes");
        btnReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportesActionPerformed(evt);
            }
        });
        jMenu4.add(btnReportes);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(lblLinea)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(lblColumna)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(357, 357, 357)
                .addComponent(btnLimpiar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblLinea)
                    .addComponent(jLabel3)
                    .addComponent(lblColumna))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        abrirArchivo();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        metodoGuardar();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarComoActionPerformed
        metodoGuardarComo();
    }//GEN-LAST:event_btnGuardarComoActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        nuevaPestania();
        imprimirVariablesGlobales();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        //System.out.println("Analizando...");
        txtConsola.append("[" + getFecha() + "][LOG] >>  Iniciando Compilacion de archivo FCA...\n");
        compilar(texto);
        //compilarJS(texto);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Finaliza Compilacion de archivo FCA!\n");
        
        File file1 = new File(rutaProyecto1.replace("\"", ""));
        File file2 = new File(rutaProyecto2.replace("\"", ""));
        
        txtConsola.append("[" + getFecha() + "][LOG] >>  Iniciando Compilacion de archivos JS...\n");
        
        archivoJS_Acompilar(file1);  //aqui es donde se compila
        archivoJS_Acompilar(file2);

        txtConsola.append("[" + getFecha() + "][LOG] >>  Finaliza Compilacion de archivos JS!\n");
        
        
        crearGraficas();
        //reporteJson();
        //generarReporeteHTML();
        
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void panelPrincipalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelPrincipalMousePressed
        //JScrollPane scrolPane;
        //scrolPane = (JScrollPane) panelPrincipal.getSelectedComponent();
        nombrePestaniaActual = panelPrincipal.getSelectedComponent().getName();
        //String nombreArchivo []= ruta.split("\\\\");
        //System.out.println("nombre: "+nombrePestaniaActual);
    }//GEN-LAST:event_panelPrincipalMousePressed

    private void btnEliminarActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActualActionPerformed
        // TODO add your handling code here:
        panelPrincipal.remove(panelPrincipal.getSelectedComponent());
    }//GEN-LAST:event_btnEliminarActualActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        txtConsola.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportesActionPerformed
        // TODO add your handling code here:
        //listaComparacion.imprimir();
        //htmlTokens();
        //generarReporeteHTML();
        txtConsola.append("[" + getFecha() + "][LOG] >>  Generando Reporte en html y Json\n");
        reporteJson();
        generarReporeteHTML();
        txtConsola.append("[" + getFecha() + "][LOG] >>  Reoirtes Finalizados\n");
    
    }//GEN-LAST:event_btnReportesActionPerformed

    public static void abrirArchivoJSaString(String rutaArchivo)
    {
        File file = new File(rutaArchivo);
        try(FileReader fileReader = new FileReader(file))
        {
            String cadena = "";
            int valor = fileReader.read();
            while(valor != -1)
            {
                cadena = cadena + (char)valor;
                valor = fileReader.read();
            }
            textoJS = cadena;
            //System.out.println(textoJS);
        } catch (IOException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void abrirArchivo()
    {
        JFileChooser fileChooser = new JFileChooser();
        File fileA = new File("C:\\"); // File fileA = new File("C:\\Users\\"+ userCompu +"\\Desktop");  *************************************
        //File fileA = new File("C:\\Users\\"+ userCompu +"\\Desktop"); //************************************************************************
        fileChooser.setCurrentDirectory(fileA);
        
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.FCA", "fca");
        fileChooser.setFileFilter(filtro);
        
        int select = fileChooser.showOpenDialog(contentPane);   //nos devuelve una de las opcions del fileChooser
        if(select == JFileChooser.APPROVE_OPTION);
        
        if(select == JFileChooser.APPROVE_OPTION)
        { 
            File file = fileChooser.getSelectedFile();
            ruta = file.getAbsolutePath();
            
            String nombreArchivo []= ruta.split("\\\\");
            String strignNombreArchivo = nombreArchivo[nombreArchivo.length-1];
            
            JTextArea textArea = new JTextArea();
            textArea.setName(strignNombreArchivo);
            //nombreArchivoParaErrores = strignNombreArchivo;
            textArea.addMouseListener(this);
            textArea.addKeyListener(this);
            
            JScrollPane scrollPanel = new JScrollPane(textArea);
            
            textArea.addCaretListener(new CaretListener() {
                @Override
                public void caretUpdate(CaretEvent ce) {
                    JTextArea editArea = (JTextArea)ce.getSource();
                    int linea = 1;
                    int columna = 1;
                    try {
                        int caretpos = editArea.getCaretPosition();
                        linea= editArea.getLineOfOffset(caretpos); //Obtiene la linea o fila
                        columna = caretpos - editArea.getLineStartOffset(linea); //Obtiene la columna
                        // Ya que las l√≠neas las cuenta desde la 0
                        linea += 1;
                        columna += 1;
                        
                    } catch(Exception ex){ }
                    lblLinea.setText(Integer.toString(linea));
                    lblColumna.setText(Integer.toString(columna));
                    
                }
            });

            scrollPanel.setName(ruta);
            panelPrincipal.addTab(strignNombreArchivo, scrollPanel);
            
            try(FileReader fileReader = new FileReader(file))
            {
                String cadena = "";
                int valor = fileReader.read();
                while(valor != -1)
                {
                    cadena = cadena + (char)valor;
                    valor = fileReader.read();
                }
                textArea.setText(cadena);
                texto = textArea.getText();
                //textoFinalParaCompilar = texto;
                int j = 0;
                j = 1;
            } catch (IOException ex) {
                Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            }
            txtConsola.append("[" + getFecha() + "][LOG] >>  Archivo '" + strignNombreArchivo + "' abierto correctamente\n");
        }
        
    }

    public void metodoGuardar()
    {
        int guardarComo = 0;
        String validacionExisteArchivo = panelPrincipal.getSelectedComponent().getName();
        String nombreArchivo []= validacionExisteArchivo.split("\\\\");
        if(nombreArchivo.length == 1){
            guardarComo = metodoGuardarComo();
            return;
        }
        try{ 
            ruta = panelPrincipal.getSelectedComponent().getName();
            FileWriter fw = new FileWriter(ruta, false);
            PrintWriter pw = new PrintWriter(fw);
            pw.println(texto);
            pw.close();
            JOptionPane.showMessageDialog(null, "Guardado con exito");
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error al guardar " + ex);
        }
    }
    
    public int metodoGuardarComo()
    {
        JFileChooser fileChooser = new JFileChooser();
        File file;
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.FCA", "fca");
        fileChooser.setFileFilter(filtro);
        fileChooser.setCurrentDirectory(new File("C:\\")); // fileChooser.setCurrentDirectory(new File("C:\\Users\\"+ userCompu +"\\Desktop"));
        //fileChooser.setCurrentDirectory(new File("C:\\Users\\"+ userCompu +"\\Desktop")); //*******************************************************
        
        if(fileChooser.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION)
        {
            
            file = fileChooser.getSelectedFile();
            fileChooser.setSelectedFile(new File(file.getPath() + ".fca"));
            file = fileChooser.getSelectedFile();
            

            String Documento = texto;
            String mensaje = guardarComo(file, Documento);
            if(mensaje != null)
            {
                JOptionPane.showMessageDialog(null, mensaje);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Arrchivo No compatible");
            }
            
            ruta = file.getPath();
            String nombreArchivo []= ruta.split("\\\\");
            String strignNombreArchivo = nombreArchivo[nombreArchivo.length-1];
            panelPrincipal.getSelectedComponent().setName(file.getPath());
            panelPrincipal.setTitleAt(panelPrincipal.getSelectedIndex(),strignNombreArchivo);
        }
        return 1;
    }
    
    FileOutputStream salida;
    public String guardarComo(File archivo, String documento)
    {
        String respuesta = null;
        try
        { 
            salida = new FileOutputStream(archivo);
            byte[] by = documento.getBytes();
            salida.write(by);
            respuesta = "Archivo guardado exitosamente!!";
        }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Error al guardarr como " + ex.getMessage());
        }
        return respuesta;
    }
    
    public void nuevaPestania()
    {
        JTextArea textArea = new JTextArea();
        //textArea.setName("Nuevo");//texto
        //nombreArchivoParaErrores = strignNombreArchivo;
        textArea.addMouseListener(this);
        textArea.addKeyListener(this);
        
        JScrollPane scrollPanel = new JScrollPane(textArea);
        
        textArea.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce) {
                JTextArea editArea = (JTextArea)ce.getSource();
                int linea = 1;
                int columna = 1;
                try {
                    int caretpos = editArea.getCaretPosition();
                    linea= editArea.getLineOfOffset(caretpos); //Obtiene la linea o fila
                    columna = caretpos - editArea.getLineStartOffset(linea); //Obtiene la columna
                    // Ya que las l√≠neas las cuenta desde la 0
                    linea += 1;
                    columna += 1;
                    
                } catch(Exception ex){ }
                lblLinea.setText(Integer.toString(linea));
                lblColumna.setText(Integer.toString(columna));
                
            }
        });

        scrollPanel.setName("Nuevo"+contPestanias);
        panelPrincipal.addTab("Nuevo"+contPestanias, scrollPanel);
        contPestanias++;
        //System.out.println(textArea.getName());
    }
    
    public static void errorLexico(String tipo, String error, String linea, String columna)
    {
        listaErrores.agregarToken(error, tipo, Integer.parseInt(linea), Integer.parseInt(columna), ruta);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Tipo de Error: '" + tipo + "' - Error: '" + error + "' - Linea: " + linea + " - Columna: " + columna + "\n");
    }
    
    public static void errorSintactico(String tipo, String error, String linea, String columna) {
        listaErrores.agregarToken(error, tipo, Integer.parseInt(linea), Integer.parseInt(columna), ruta);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Tipo de Error: '" + tipo + "' - Error: '" + error + "' - Linea: " + linea + " - Columna: " + columna + "\n");
    }
    
    public static void errorLexicoJS(String tipo, String error, int linea, int columna)
    {
        listaErrores.agregarToken(error, tipo, linea, columna, "");
        txtConsola.append("[" + getFecha() + "][LOG] >>  Tipo de Error: '" + tipo + "' - Error: '" + error + "' - Linea: " + linea + " - Columna: " + columna + "\n");
    }
    
    public static void errorSintacticoJS(String tipo, String error, String linea, String columna) {
        listaErrores.agregarToken(error, tipo, Integer.parseInt(linea), Integer.parseInt(columna), "");
        txtConsola.append("[" + getFecha() + "][LOG] >>  Tipo de Error: '" + tipo + "' - Error: '" + error + "' - Linea: " + linea + " - Columna: " + columna + "\n");
    }
    
    public static void agregarNodoComparacion(NodoComparacion nodo)
    {
        String nom [] = ruta.split("\\\\");
        nodo.setNombreArchivo(nom[nom.length-2] + "\\" + nom[nom.length-1]);
        listaComparacion.agregar(nodo);
        //System.out.println("clase: " + nodo.getNombreClase() + " - lineas: " + nodo.getLineasClase());
    }
    
    public static String getFecha()
    {
        return (String)date.format(LocalDateTime.now());
    }
    
    public static void rutasProyecto(String ruta1, String ruta2)
    {
        rutaProyecto1 = ruta1;
        rutaProyecto2 = ruta2;
        JTreeFile jTreeFiles = new JTreeFile();
        File file1 = new File(ruta1.replace("\"", ""));
        jTreeFiles.setFile(file1);
        jTreeFiles.setJTree(jArbol1);
        jTreeFiles.init();
        
        JTreeFile jTreeFiles2 = new JTreeFile();
        File file2 = new File(ruta2.replace("\"", ""));
        jTreeFiles2.setFile(file2);
        jTreeFiles2.setJTree(jArbol2);
        jTreeFiles2.init();
        //System.out.println("Arbol");
    }
    
    public static void archivoJS_Acompilar(File rootFile)
    {
        //String ruta = "";
        JTree jTree1 = new JTree();
        DefaultTreeModel modelo;
        //creamos el nodo principal
        String rutaPoyecto [] = rootFile.getPath().split("\\\\");   //C:\\Users\\EduardoFlores\\Desktop\\Proyecto1
        String directorio = rutaPoyecto[rutaPoyecto.length-1];      // Proyecto1
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(directorio);
        //creamos un modelo con el nodo que creamos principal
        modelo = new DefaultTreeModel(top);
        jTree1.setModel(modelo);

        for (File f : rootFile.listFiles()) {       // lo que tiene adentro rootFile, osea adentro de Proyecto1
            String nombre [] = f.getPath().split("\\\\");
            String path = nombre[nombre.length-1];
            
            if(path.length() > 2)
            {
                String extencion = path.substring(path.length() - 3);
                if(extencion.equalsIgnoreCase(".js"))
                {
                    ruta = f.getPath();
                    abrirArchivoJSaString(ruta);  //textoJS
                    System.out.println(ruta);
                    compilarJS(textoJS);
                    textoJS = "";
                    //System.out.println("El archivo a compilar: " + ruta);
                }
            }
            DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(path);
            //a√±adimos el nodo a la raiz
            top.add(raiz);
            //hacemos un recorrido de dos niveles a partir de cada una unidad
            actualizaNodo(raiz, f);     
        }
    }
    
    public static boolean actualizaNodo(DefaultMutableTreeNode nodo, File f) {
        //quitamos lo que tenga el nodo 
        nodo.removeAllChildren();
        //recursivamente mandamos actualizar
        return actualizaNodo(nodo,f,2); 
    }
    
    public static boolean actualizaNodo(DefaultMutableTreeNode nodo, File f, int profundidad) {
        //String ruta = "";
        File[] files = f.listFiles(); // de el nodo que llega listamos todos sus archivos
        if(files!=null && profundidad>0) //permite detener la recursividad si ya llego al limite 
        {   
           for(File file: files)  // recorre todos los archivos 
           {
               String nombre [] = file.getPath().split("\\\\");
               String path = nombre[nombre.length-1];
               DefaultMutableTreeNode nuevo = new DefaultMutableTreeNode(path);
               if(path.length() > 2)
            {
                String extencion = path.substring(path.length() - 3);
                if(extencion.equalsIgnoreCase(".js"))
                {
                    ruta = file.getPath();
                    abrirArchivoJSaString(ruta);  //textoJS
                    System.out.println(ruta);
                    compilarJS(textoJS);
                    textoJS = "";
                    //System.out.println("El archivo a compilar: " + ruta);
                }
            }
               //vuelve a mandar en caso que sea directorio 
               actualizaNodo(nuevo, file,profundidad); 
               nodo.add(nuevo); //crea el nodo
            }
        }
       return true; 
    } 
    
    
    public static void agregarToken(String token, String lexema, int linea, int columna)
    {
        listaTokens.agregarToken(lexema, token, linea, columna, ruta);
    }
    
    public static void agregarTokenJS(String token, String lexema, int linea, int columna)
    {
        listaTokensJS.agregarToken(lexema, token, linea, columna, ruta);
    }
    
    
    public void compilar(String texto){
        scanner lexico = new scanner(new StringReader(texto));
        parser sintactico = new parser(lexico);
        
        try {
            sintactico.parse();
        } catch (Exception ex) {
            //Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Compilar error: " +ex.getCause());
            System.out.println("Compilar error: " +ex.getMessage());
        }
    }
    
    public static void compilarJS(String texto){
        scannerjs lexico = new scannerjs(new StringReader(texto));
        parserJS sintactico = new parserJS(lexico);
        
        try {
            sintactico.parse();
        } catch (Exception ex) {
            //Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Compilar error: " +ex.getCause());
            System.out.println("Compilar error: " +ex.getMessage());
        }
    }
    
    public void limpiarTree(){
        jArbol1.removeAll();
        jArbol2.removeAll();
        
        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(null);
        DefaultTreeModel modeloArbol = new DefaultTreeModel(raiz);
        jArbol1.setModel(modeloArbol);
        jArbol2.setModel(modeloArbol);
    }
    
    public static void guardarVariablesGlobales(String tipo, String variable, String valor){
        String vTipo = tipo;
        String vVariables [] = variable.split("@");
        //String vValor [] = valor.split("#");
        
        if (vVariables.length > 1)
        {
            for(String dato : vVariables){
                listaGlobales.agregarVariable(tipo, dato, valor);
            }
        }
        else
        {
            listaGlobales.agregarVariable(tipo, vVariables[0], valor);
        }
    }

    public static void guardarDatosBarras(String datos_barras){
        NodoGraficas nodo = new NodoGraficas();
        String caracteristicas [] = datos_barras.split("@@");
        nodo.setTipo("barras");
        for(String dato : caracteristicas){
            String validacionExtra = dato.substring(0, 1);
            if(validacionExtra.equalsIgnoreCase("@")){  dato = dato.substring(1);   }
            String datos [] = dato.split("@");
            if(datos[0].equalsIgnoreCase("titulo")) {   nodo.setTitulo(datos[1]);   }
            else if(datos[0].equalsIgnoreCase("ejeX"))  {   nodo.setEjeX(arrayDeValores(datos)); }
            else if(datos[0].equalsIgnoreCase("valores"))  {   nodo.setValores(arrayDeValores(datos)); }
            else if(datos[0].equalsIgnoreCase("tituloX"))  {   nodo.setTituloX(datos[1]); }
            else if(datos[0].equalsIgnoreCase("tituloY"))  {   nodo.setTituloY(datos[1]); }
            //System.out.println(datos[1]);
        }
        updateValoresQueTienenVariables(nodo);
        setValorDeArrayVariables(nodo);
        listaGraficas.add(nodo);
    }
    
    public static void guardarDatosPie(String datos_pie){
        NodoGraficas nodo = new NodoGraficas();
        String caracteristicas [] = datos_pie.split("@@");
        nodo.setTipo("pie");
        for(String dato : caracteristicas){
            String validacionExtra = dato.substring(0, 1);
            if(validacionExtra.equalsIgnoreCase("@")){  dato = dato.substring(1);   }
            String datos [] = dato.split("@");
            if(datos[0].equalsIgnoreCase("titulo")) {   nodo.setTitulo(datos[1]);   }
            else if(datos[0].equalsIgnoreCase("ejeX"))  {   nodo.setEjeX(arrayDeValores(datos)); }
            else if(datos[0].equalsIgnoreCase("valores"))  {   nodo.setValores(arrayDeValores(datos)); }
            //System.out.println(datos[1]);
        }
        updateValoresQueTienenVariables(nodo);
        setValorDeArrayVariables(nodo);
        listaGraficas.add(nodo);
    }
    
    public static void guardarDatosLineas(String datos_lineas){
        NodoGraficas nodo = new NodoGraficas();
        String caracteristicas [] = datos_lineas.split("@@");
        nodo.setTipo("lineas");
        for(String dato : caracteristicas){
            String validacionExtra = dato.substring(0, 1);
            if(validacionExtra.equalsIgnoreCase("@")){  dato = dato.substring(1);   }
            String datos [] = dato.split("@");
            if(datos[0].equalsIgnoreCase("titulo")) {   nodo.setTitulo(datos[1]);   }
            else if(datos[0].equalsIgnoreCase("archivo"))  {   nodo.setArchivo(datos[1]); }
            //System.out.println(datos[1]);
        }
        updateValoresQueTienenVariables(nodo);
        listaGraficas.add(nodo);
    }
    
    public static String[] arrayDeValores(String [] datos){
        String vDatos = "";
        for(int i = 2; i<datos.length; i++)
        {
            vDatos += datos[i] + "@";
        }
        String resultado [] = vDatos.split("@");
        return resultado;
    }
    
    public static void updateValoresQueTienenVariables(NodoGraficas nodo){
        nodo.setArchivo(listaGlobales.getValorByVariable(nodo.getArchivo()));
        nodo.setTitulo(listaGlobales.getValorByVariable(nodo.getTitulo()));
        nodo.setTituloX(listaGlobales.getValorByVariable(nodo.getTituloX()));
        nodo.setTituloY(listaGlobales.getValorByVariable(nodo.getTituloY()));
        if(nodo.getEjeX() != null)
        {
            String ejeX [] = new String[nodo.getEjeX().length];
            for(int i = 0; i<nodo.getEjeX().length; i++) //[var1][var2]["cadena"]
            {
                ejeX[i] = listaGlobales.getValorByVariable(nodo.getEjeX()[i]);
            }
            nodo.setEjeX(ejeX);
        }
        if(nodo.getValores() != null){
            String valores [] = new String[nodo.getValores().length];
        for(int i= 0; i<nodo.getValores().length; i++)
        {
            valores[i] = listaGlobales.getValorByVariable(nodo.getValores()[i]);
        }
        nodo.setValores(valores);
        }
    }
    
    public static void setValorDeArrayVariables(NodoGraficas nodo){
        nodo.getValores(); //[var1][var2][var3][0.3]
        Double valores [] = new Double[nodo.getValores().length];
        for(int i = 0; i<nodo.getValores().length; i++)
        {
            try {
                String puntajeEspe[] = nodo.getValores()[i].split("#");
                if(puntajeEspe.length < 2)
                {
                    valores[i] = Double.parseDouble(nodo.getValores()[i]);
                }
            } catch (Exception e) {
                txtConsola.append("[" + getFecha() + "][ERROR] >>  "
                        + "Imposible convertir a Double '" +nodo.getValores()[i]+ "'\n");
            }
        }
        nodo.setValoresDouble(valores);
    }
    
    //************* Reporte Json
    public static void reporteJson(){
        NodoJSON nodoJson = new NodoJSON();
        nodoJson.setPuntajeGeneral(puntajeGeneral);
        nodoJson.setPuntajeEspecifico(listaNodosEspecificos);
        Gson gson = new Gson();
        String strJson = gson.toJson(nodoJson);
        
        try {
            FileWriter fw = new FileWriter("ReporteJson.json", false);
            PrintWriter pw = new PrintWriter(fw);
            pw.println(strJson);
            pw.close();
            System.out.println(gson.toJson(nodoJson));
        } catch (IOException ex) {
            Logger.getLogger(Proyecto1.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al generar reporte Json");
        }
    }
    
    
    //********************************************** INICIO GRAFICAS *********************************************************
    public static void crearGraficas(){
        NodoGraficas nodo;
        for(int i=0; i<listaGraficas.size(); i++){
            nodo = (NodoGraficas)listaGraficas.get(i);
            
            if(nodo.getTipo().equalsIgnoreCase("barras")){  nodo = getPuntajeEspecifico(nodo);  barras(nodo);   }
            else if(nodo.getTipo().equalsIgnoreCase("pie")){    nodo = getPuntajeEspecifico(nodo);    pie(nodo); }
            else if(nodo.getTipo().equalsIgnoreCase("lineas")){    lineas(nodo); }
        }
        lineas();
    }
    
    
    public static NodoGraficas getPuntajeEspecifico(NodoGraficas nodo){ //PuntajeEspecifico#"archivo1.js"#"variable"#"tipo"# - 0.2 - 0.1
        String vDatos [] = nodo.getValores();
        for(int i=0; i<vDatos.length; i++)
        {
            String puntajeEspe [] = vDatos[i].split("#");   //PuntajeEspecifico#"archivo1.js"#"variable"#"id"#
            if(puntajeEspe[0].equalsIgnoreCase("PuntajeEspecifico"))
            {
                NodoEspecifico nodoEspecifico = new NodoEspecifico();
                nodoEspecifico.setArchivo(puntajeEspe[1]);
                nodoEspecifico.setTipo(puntajeEspe[2]);
                nodoEspecifico.setNombre(puntajeEspe[3]);
                double punteo = calcularPuntajeEspecifico(puntajeEspe[1], puntajeEspe[2], puntajeEspe[3]);
                nodo.setValorDouble(i, punteo);
                nodoEspecifico.setPuntaje(punteo);
                listaNodosEspecificos.add(nodoEspecifico);
            }else if(puntajeEspe[0].equalsIgnoreCase("PuntajeGeneral"))
            {
                puntajeGeneral = calcularPuntajeGeneral();
                nodo.setValorDouble(i, puntajeGeneral);
                System.out.println("Puntaje General: " + puntajeGeneral);
            }
        }
        return nodo;
    }
    
    public static double calcularPuntajeGeneral()
    {
        return listaComparacion.getCalcularPuntajeGeneral();
    }
    
    public static double calcularPuntajeEspecifico(String archivo, String atributo, String id)
    {
        archivo = archivo.replace("\"", "");
        atributo = atributo.replace("\"", "");
        id = id.replace("\"", "");
        double puntajeEspecifico = 0.0;
        for(int i=0; i<listaComparacion.getSize(); i++)
        {   
            if(atributo.equalsIgnoreCase("clase"))
            {
                puntajeEspecifico = listaComparacion.getPuntajeRepitenciaClase(archivo, atributo, id);
                return puntajeEspecifico;
            }else if(atributo.equalsIgnoreCase("variable"))
            {
                puntajeEspecifico = listaComparacion.getPuntajeRepitenciaVariable(archivo, id);
                return puntajeEspecifico;
            }else if(atributo.equalsIgnoreCase("metodo") || atributo.equalsIgnoreCase("funcion"))
            {
                puntajeEspecifico = listaComparacion.getPuntajeRepitenciaFunciones(archivo, id);
                return puntajeEspecifico;
            }else if(atributo.equalsIgnoreCase("comentario"))
            {
                puntajeEspecifico = listaComparacion.getPuntajeRepitenciaComentario(archivo, atributo);
                return puntajeEspecifico;
            }
        }
        return 0.0;
    }
    
    public static void createImage(File file, JFreeChart chart){
        try {
            ChartUtilities.saveChartAsJPEG(file, chart, 800, 800);
        } catch (IOException ex) {
            Logger.getLogger(Proyecto1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void barras(NodoGraficas nodo){
        txtConsola.append("[" + getFecha() + "][LOG] >>  Creando Grafica de barras "+nodo.getTitulo()+" \n");
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        for(int i = 0; i<nodo.getEjeX().length; i++) // [var1][var2][var3]
        {
            dataset.addValue(nodo.getValoresDouble()[i], nodo.getEjeX()[i], nodo.getEjeX()[i]);
        }
        
        JFreeChart chart = ChartFactory.createBarChart(nodo.getTitulo(), nodo.getTituloX(), nodo.getTituloY(), 
                dataset, PlotOrientation.VERTICAL, true, true, false);
        
        String nombreGrafica = nodo.getTitulo().replace("\"", "") + "_" + contGraficas + ".jpg";
        grafiacasBarras.add(nombreGrafica);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Grafica de barras "+nodo.getTitulo()+" creado con exito.\n");
        File file = new File(nombreGrafica);
        contGraficas++;
        createImage(file, chart);

    }
    
    
    public static void pie(NodoGraficas nodo){
        txtConsola.append("[" + getFecha() + "][LOG] >>  Creando Grafica de pie "+nodo.getTitulo()+" \n");
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        for(int i=0; i<nodo.getEjeX().length; i++)
        {
            pieDataset.setValue(nodo.getEjeX()[i], nodo.getValoresDouble()[i]);
        }
        
        JFreeChart chart = ChartFactory.createPieChart(nodo.getTipo(), pieDataset, true, true, false);
        
        
        
        String nombreGrafica = nodo.getTitulo().replace("\"", "") + "_" + contGraficas + ".jpg";
        grafiacasPie.add(nombreGrafica);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Grafica de pie "+nodo.getTitulo()+" creado con exito.\n");
        File file = new File(nombreGrafica);
        contGraficas++;
        createImage(file, chart);  
    }
    
    
    public static void lineas(NodoGraficas nodo){
        txtConsola.append("[" + getFecha() + "][LOG] >>  Creando Grafica de lineas "+nodo.getTitulo()+" \n");
        JFreeChart chart = ChartFactory.createLineChart(nodo.getArchivo(), "", "Cantidad de Caracteristica", 
                createDataset(nodo.getArchivo()), PlotOrientation.VERTICAL, true, true, true);
        
        String nombreGrafica = nodo.getTitulo().replace("\"", "") + "_" + contGraficas + ".jpg";
        grafiacasLineas.add(nombreGrafica);
        txtConsola.append("[" + getFecha() + "][LOG] >>  Grafica de lineas "+nodo.getTitulo()+" creado con exito.\n");
        File file = new File(nombreGrafica);
        contGraficas++;
        createImage(file, chart);
    }
    
    public static DefaultCategoryDataset createDataset(String nombreArchivo){
        // buscar los datos de ese archivo
        String arDatos = listaComparacion.getDatosParaGraficaLineas(nombreArchivo.replace("\"", ""));
        
        String arDatos2[] = arDatos.split("#");
        
        String arDatosPro1 [] = arDatos2[0].split("@");
        String arDatosPro2 [] = arDatos2[1].split("@");
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        for(int i = 1; i<arDatosPro1.length; i++)
        {
            dataset.addValue(Integer.parseInt(arDatosPro1[i]), arDatosPro1[0] , getEjeX(i));
            dataset.addValue(Integer.parseInt(arDatosPro2[i]), arDatosPro2[0] , getEjeX(i));
        }
        
        return dataset;
    }
    
    public static String getEjeX(int pos)
    {
        if(pos == 1){   return "variables";    }
        else if(pos == 2){   return "metodos/funciones";    }
        else if(pos == 3){   return "clases";    }
        else if(pos == 4){   return "comentarios";    }
        return "";
    }
    
    
    
    public static void lineas(){    //ProyectA-4-ProyectoB-2		//comentarios
        JFreeChart chart = ChartFactory.createLineChart("Reporte General", "", "Cantidad", 
                createDataset(), PlotOrientation.VERTICAL, true, true, true);
        
        graficaResumen = "LineasResumen.jpg";
        File file = new File(graficaResumen);
        createImage(file, chart);
    }
    
    public static DefaultCategoryDataset createDataset(){
        String come = listaComparacion.getDatosResumenProyecto("comentarios");//
        String var = listaComparacion.getDatosResumenProyecto("variables");
        String meth = listaComparacion.getDatosResumenProyecto("metodos");
        String clas = listaComparacion.getDatosResumenProyecto("clases");
        String comentarios[] = come.split("-");
        String variables [] = var.split("-");
        String metodos [] = meth.split("-");
        String clases [] = clas.split("-");
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(Integer.valueOf(variables[1]), variables[0], "variables");
        dataset.addValue(Integer.valueOf(variables[3]), variables[2], "variables");
        
        dataset.addValue(Integer.valueOf(metodos[1]), metodos[0], "metodos");
        dataset.addValue(Integer.valueOf(metodos[3]), metodos[2], "metodos");
        
        dataset.addValue(Integer.valueOf(clases[1]), clases[0], "clases");
        dataset.addValue(Integer.valueOf(clases[3]), clases[2], "clases");
        
        dataset.addValue(Integer.valueOf(comentarios[1]), comentarios[0], "comentarios");
        dataset.addValue(Integer.valueOf(comentarios[3]), comentarios[2], "comentarios");
        
        return dataset;
    }
    //***********************************************  FIN GRAFICAS **********************************************************
    
    //*************************************** INICIO REPORTES HTML ******************************************************************
    
    public void htmlTokens(){
        String palabra;
        String nombreArchivo = "Prueba";

        try{ 
            FileWriter fw = new FileWriter("ReporteTokensFCA.html", false);
            PrintWriter pw = new PrintWriter(fw);
            pw.println("<html>"
                    + "<head>"
                    + "<title>TOKEN</title>"
                    + "<style type=\"text/css\">"
                    + "h1{font-style: italic;color: #0202CC}"
                    + "div.b{color: #37CC20;}"
                    + "h5.n{color: #CC0000}"
                    + "</style>"
                    + "</head>"
                    + "<body>"
                    + "<table>"
                    + "<td>"
                    + "<h1>TOKENS</h1>"
                    + "<div class=\"b\">UNIVERSIDAD DE SAN CARLOS DE GUATEMALA</div>"
                    + "<div class=\"b\">FACULTAD DE INGENIERIA</div>"
                    + "<div class=\"b\">ESCUELA DE CIENCIAS</div>"
                    + "<div class=\"b\">INGENIERIA EN CIENCIAS Y SISTEMAS</div>"
                    + "<div class=\"b\">COMPI 1</div>"
                    + "</td>"
                    + "<td><img src = \"img.png\"/></td>"
                    + "</table>"
                    + "<table>"
                    + "<tr>"
                    //+ "<td><h4>Archivo Fuente: </h4></td>"
                    //+ "<td><h5 class=\"n\">"+nombreArchivo+"</h5></td>"
                    + "</tr>"
                    + "<tr>"
                    //+ "<td><h4>Archivo Salida: </h4></td>"
                    //+ "<td><h5 class=\"n\">Token.html</h5></td>"
                    + " </tr>"
                    + "</table>"
                    + "<table border=8 class=\"1\">"
                    + "<tr>"
                    + "<td>Lexema</td>"
                    + "<td>Token</td>"
                    + "<td>Linea</td>"
                    + "<td>Columna</td>"
                    + "<td>Archivo</td>"
                    + "</tr>"
                    + "");
            //for(int x = 0; x<posVec; x++){
                //String VerificarLexema = Lexema[x];
                //String LexemaHTML;
                //String nuevoLexemaHTML;
                

                //LexemaHTML = Lexema[x];

                
                pw.println("<tr>"
                        + "<td>"+"3"+"</td>"
                        + "<td>"+"5"+"</td>"
                        + "<td>"+"lexema"+"</td>"
                        + "<td>"+"No. Linea"+"</td>"
                        + "<td>"+"tipo token"+"</td>"
                        + "</tr>");
            //}
            pw.println("</table>"
                    + "</body>"
                    + "</html>");
            pw.close();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error al grabar archivo" + ex);
        }
    }
    
    
    
    
    //*************************************** FIN REPORTES HTML ******************************************************************
    
    
    
    public static void imprimirVariablesGlobales(){
        NodoVariables nodo = null;
        for(int i=0; i<listaGlobales.getSize(); i++){
            nodo = listaGlobales.getVariableByPos(i);
            if (nodo != null){
                System.out.println(nodo.getTipo() + " " + nodo.getVariable() + " = " + nodo.getValor());
            }
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnAbrir;
    private javax.swing.JMenuItem btnEjecutar;
    private javax.swing.JMenuItem btnEliminarActual;
    private javax.swing.JMenuItem btnGuardar;
    private javax.swing.JMenuItem btnGuardarComo;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JMenuItem btnReportes;
    public static javax.swing.JTree jArbol1;
    private static javax.swing.JTree jArbol2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblColumna;
    private javax.swing.JLabel lblLinea;
    private javax.swing.JTabbedPane panelPrincipal;
    private static javax.swing.JTextArea txtConsola;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent ke) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //JTextArea textArea = new JTextArea();
        //textArea = (JTextArea) ke.getSource();
        //texto = textArea.getText();
        //System.out.println(texto);
    }

    @Override
    public void keyPressed(KeyEvent ke) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //System.out.println("keyPressed 2");
    }

    @Override
    public void keyReleased(KeyEvent ke) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        JTextArea textArea = new JTextArea();
        textArea = (JTextArea) ke.getSource();
        texto = textArea.getText();
        //nombrePestaniaActual = textArea.getName();
        //System.out.println("keyReleased: "+nombrePestaniaActual);
        //System.out.println(ruta);
    }

    int num = 0;
    @Override
    public void mouseClicked(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        JTextArea textArea = new JTextArea();
        textArea = (JTextArea) me.getSource();
        texto = textArea.getText();
        //num = panelPrincipal.getSelectedIndex();
        //System.out.println("test: "+num);
        //nombrePestaniaActual = textArea.getName();
        
        //System.out.println("mouseClicked: "+nombrePestaniaActual);
        //System.out.println(ruta);
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void generarReporeteHTML(){
        String come = listaComparacion.getDatosResumenProyecto("comentarios");//
        String var = listaComparacion.getDatosResumenProyecto("variables");
        String meth = listaComparacion.getDatosResumenProyecto("metodos");
        String clas = listaComparacion.getDatosResumenProyecto("clases");
        String comentarios[] = come.split("-");
        String variables [] = var.split("-");
        String metodos [] = meth.split("-");
        String clases [] = clas.split("-");
        
        try{ 
            FileWriter fw = new FileWriter("index.html", false);
            PrintWriter pw = new PrintWriter(fw);
            pw.println(
                    "<!DOCTYPE html>\n" +
"<html lang=\"en\">\n" +
"    <head>\n" +
"        <meta charset=\"utf-8\" />\n" +
"        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n" +
"        <meta name=\"description\" content=\"\" />\n" +
"        <meta name=\"author\" content=\"\" />\n" +
"        <title>Reporte Final</title>\n" +
"        <!-- Favicon-->\n" +
"        <link rel=\"icon\" type=\"image/x-icon\" href=\"assets/favicon.ico\" />\n" +
"        <!-- Font Awesome icons (free version)-->\n" +
"        <script src=\"https://use.fontawesome.com/releases/v5.15.3/js/all.js\" crossorigin=\"anonymous\"></script>\n" +
"        <!-- Google fonts-->\n" +
"        <link href=\"https://fonts.googleapis.com/css?family=Montserrat:400,700\" rel=\"stylesheet\" type=\"text/css\" />\n" +
"        <link href=\"https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic\" rel=\"stylesheet\" type=\"text/css\" />\n" +
"        <!-- Core theme CSS (includes Bootstrap)-->\n" +
"        <link href=\"css/styles.css\" rel=\"stylesheet\" />\n" +
"        <!--===============================================================================================-->	\n" +
"	<link rel=\"icon\" type=\"image/png\" href=\"images/icons/favicon.ico\"/>\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/bootstrap/css/bootstrap.min.css\">\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"fonts/font-awesome-4.7.0/css/font-awesome.min.css\">\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/animate/animate.css\">\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/select2/select2.min.css\">\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"vendor/perfect-scrollbar/perfect-scrollbar.css\">\n" +
"    <!--===============================================================================================-->\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/util.css\">\n" +
"        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\n" +
"    <!--===============================================================================================-->\n" +
"    </head>\n" +
"    <body id=\"page-top\">\n" +
"        <!-- Navigation-->\n" +
"        <nav class=\"navbar navbar-expand-lg bg-secondary text-uppercase fixed-top\" id=\"mainNav\">\n" +
"            <div class=\"container\">\n" +
"                <a class=\"navbar-brand\" href=\"#page-top\">Proyecto 1 </a>\n" +
"                <button class=\"navbar-toggler text-uppercase font-weight-bold bg-primary text-white rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n" +
"                    <i class=\"fas fa-bars\"></i>\n" +
"                </button>\n" +
"                <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n" +
"                    <ul class=\"navbar-nav ms-auto\">\n" +
"                        <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded\" href=\"#about\">Resumen</a></li>\n" +
"                        <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded\" href=\"#portfolio\">Graficas</a></li>\n" +
"                        <li class=\"nav-item mx-0 mx-lg-1\"><a class=\"nav-link py-3 px-0 px-lg-3 rounded\" href=\"#contact\">Tablas</a></li>\n" +
"                    </ul>\n" +
"                </div>\n" +
"            </div>\n" +
"        </nav>\n" +
"        <!-- Masthead-->\n" +
"        <header class=\"masthead bg-primary text-white text-center\">\n" +
"            <div class=\"container d-flex align-items-center flex-column\">\n" +
"                <!-- Masthead Avatar Image-->\n" +
"                <img class=\"masthead-avatar mb-5\" src=\"assets/img/avataaars.svg\" alt=\"...\" />\n" +
"                <!-- Masthead Heading-->\n" +
"                <h1 class=\"masthead-heading text-uppercase mb-0\">Reporte Final</h1>\n" +
"                <!-- Icon Divider-->\n" +
"                <div class=\"divider-custom divider-light\">\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                    <div class=\"divider-custom-icon\"><i class=\"fas fa-star\"></i></div>\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                </div>\n" +
"                <!-- Masthead Subheading-->\n" +
"                \n" +
"            </div>\n" +
"        </header>\n" +
"        <!-- Resumen Section-->\n" +
"        <section class=\"page-section bg-success text-white mb-0\" id=\"about\">\n" +
"            <div class=\"container\">\n" +
"                <!-- About Section Heading-->\n" +
"                <h2 class=\"page-section-heading text-center text-uppercase\">Resumen</h2>\n" +
"                <!-- Icon Divider-->\n" +
"                <div class=\"divider-custom divider-light\">\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                    <div class=\"divider-custom-icon bg-b\"><i class=\"fas fa-star\"></i></div>\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                </div>\n" +
"                <!-- About Section Content-->\n" +
"                <div class=\"row\">\n" +
"                </div> \n" +
"                        \n" +
"                            <div class=\"table100 ver2 m-b-110\">\n" +
"                                <table data-vertable=\"ver2\">\n" +
"                                    <thead>\n" +
"                                        <tr class=\"row100 head\">\n" +
"                                            <th class=\"column100 column1\" data-column=\"column1\"><h4><b>Tipo</b></h4></th>\n" +
"                                            <th class=\"column100 column2\" data-column=\"column2\"><h4><b>ProyectoA</b></h4></th>\n" +
"                                            <th class=\"column100 column3\" data-column=\"column3\"><h4><b>ProyectoB</b></h4></th>\n" +
"                                            \n" +
"                                        </tr>\n" +
"                                    </thead>\n" +
"                                    <tbody>\n" +
"                                        <tr class=\"row100\">" + 
"                                            <td class=\"column100 column1\" data-column=\"column1\"><h5><b>Variables</b></h5> </td>"
            );
            
            pw.println("<td class=\"column100 column2\" data-column=\"column2\"><h6><b>"+ variables[1] +"</b></h6></td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column3\"><h6><b>"+ variables[3] +"</b></h6></td>");
            pw.println("</tr>\n" +
"                                        <tr class=\"row100\">\n" +
"                                            <td class=\"column100 column1\" data-column=\"column1\">Total Metodos</td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column2\"><h6><b>"+ metodos[1] +"</b></h6></td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column3\"><h6><b>"+ metodos[3] +"</b></h6></td>");
            pw.println("</tr>\n" +
"                                        <tr class=\"row100\">\n" +
"                                            <td class=\"column100 column1\" data-column=\"column1\">Total Clases</td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column2\"><h6><b>"+ clases[1] +"</b></h6></td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column3\"><h6><b>"+ clases[3] +"</b></h6></td>");
            pw.println("</tr>\n" +
"                                        <tr class=\"row100\">\n" +
"                                            <td class=\"column100 column1\" data-column=\"column1\">Total Comentarios</td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column2\"><h6><b>"+ comentarios[1] +"</b></h6></td>");
            pw.println("<td class=\"column100 column2\" data-column=\"column3\"><h6><b>"+ comentarios[3] +"</b></h6></td>");
            pw.println("</tr>  \n" +
"                                    </tbody>\n" +
"                                </table>\n" +
"                            </div>");
            pw.println("<img class=\"img-fluid\" src=\""+graficaResumen+"\"/>");
            for(int i =0; i<grafiacasLineas.size(); i++)
            {
                pw.println("<p>.</p>");
                pw.println("<img class=\"img-fluid\" src=\""+grafiacasLineas.get(i)+"\"/>");
            }
            
            pw.println("<!-- About Section Button-->\n" +
"            </div>\n" +
"        </section>\n" +
"\n" +
"        <!-- Portfolio Section-->\n" +
"        <section class=\"page-section portfolio\" id=\"portfolio\">\n" +
"            <div class=\"container\">\n" +
"                <!-- Portfolio Section Heading-->\n" +
"                <h2 class=\"page-section-heading text-center text-uppercase text-black mb-0\">Graficas</h2>\n" +
"                <!-- Icon Divider-->\n" +
"                <div class=\"divider-custom\">\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                    <div class=\"divider-custom-icon\"><i class=\"fas fa-star\"></i></div>\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                </div>\n" +
"                <!-- Portfolio Grid Items-->\n" +
"                <div class=\"row justify-content-center\">\n" +
"                    <!-- Portfolio Item 1-->\n" +
"                    <div class=\"col-md-6 col-lg-4 mb-5\">\n" +
"                        <div class=\"portfolio-item mx-auto\" data-bs-toggle=\"modal\" data-bs-target=\"#portfolioModal1\">\n" +
"                            <div class=\"portfolio-item-caption d-flex align-items-center justify-content-center h-100 w-100\">\n" +
"                                <div class=\"portfolio-item-caption-content text-center text-white\"><i class=\"fas fa-plus fa-3x\"></i></div>\n" +
"                            </div>\n" +
"                            <img class=\"img-fluid\" src=\"assets/img/portfolio/barras.png\" />\n" +
"                        </div>\n" +
"                    </div>\n" +
"                    <!-- Portfolio Item 2-->\n" +
"                    <div class=\"col-md-6 col-lg-4 mb-5\">\n" +
"                        <div class=\"portfolio-item mx-auto\" data-bs-toggle=\"modal\" data-bs-target=\"#portfolioModal2\">\n" +
"                            <div class=\"portfolio-item-caption d-flex align-items-center justify-content-center h-100 w-100\">\n" +
"                                <div class=\"portfolio-item-caption-content text-center text-white\"><i class=\"fas fa-plus fa-3x\"></i></div>\n" +
"                            </div>\n" +
"                            <img class=\"img-fluid\" src=\"assets/img/portfolio/pie.png\" />\n" +
"                        </div>\n" +
"                    </div>\n" +
"                </div>\n" +
"            </div>\n" +
"        </section>\n" +
"        \n" +
"        <!-- Contact Section-->\n" +
"        <section class=\"page-section bg-info text-white mb-0\" id=\"contact\">\n" +
"        <!-- <section class=\"page-section\" id=\"contact\"> -->\n" +
"            <div class=\"container\">\n" +
"                <!-- Contact Section Heading-->\n" +
"                <h2 class=\"page-section-heading text-center text-uppercase\">Tablas</h2>\n" +
"                <!-- Icon Divider-->\n" +
"                <div class=\"divider-custom divider-light\">\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                    <div class=\"divider-custom-icon\"><i class=\"fas fa-star\"></i></div>\n" +
"                    <div class=\"divider-custom-line\"></div>\n" +
"                </div>\n" +
"                <!-- Contact Section Form-->\n" +
"                    <div class=\"table100 ver1 m-b-110\">\n" +
"					    <table data-vertable=\"ver1\">\n" +
"                            <thead>\n" +
"                                <tr class=\"row100 head\">");
            pw.println("<th class=\"column100 column1\" data-column=\"column1\"> <h4><b>Lexema</b></h4> </th>\n" +
"                                    <th class=\"column100 column2\" data-column=\"column2\"> <h4><b>Token</b></h4> </th>\n" +
"                                    <th class=\"column100 column3\" data-column=\"column3\"> <h4><b>Linea</b></h4> </th>\n" +
"                                    <th class=\"column100 column4\" data-column=\"column4\"> <h4><b>Columna</b></h4> </th>\n" +
"                                    <th class=\"column100 column5\" data-column=\"column5\"> <h4><b>Archivo</b></h4> </th>\n" +
"                                </tr>\n" +
"                            </thead>\n" +
"                            <tbody>\n");
            
            for(int i =0; i<listaTokens.getSize(); i++)
            {
                pw.println("<tr class=\"row100\">");
                pw.println("<td class=\"column100 column1\" data-column=\"column1\">"+listaTokens.getLexema(i)+"</td>");
                pw.println("<td class=\"column100 column2\" data-column=\"column2\">"+listaTokens.getToken(i)+"</td>");
                pw.println("<td class=\"column100 column3\" data-column=\"column3\">"+listaTokens.getLinea(i)+"</td>");
                pw.println("<td class=\"column100 column4\" data-column=\"column4\">"+listaTokens.getColumna(i)+"</td>");
                pw.println("<td class=\"column100 column5\" data-column=\"column5\">"+listaTokens.getArchivo(i)+"</td>");
                pw.println("</tr>");
            }
            pw.println("</tbody>\n" +
"                        </table>\n" +
"                    </div>");
            
            pw.println("<div class=\"table100 ver1 m-b-110\">\n" +
"					    <table data-vertable=\"ver1\">\n" +
"                            <thead>\n" +
"                                <tr class=\"row100 head\">\n" +
"									<th class=\"column100 column1\" data-column=\"column1\"> <h4><b>Lexema</b></h4> </th>\n" +
"                                    <th class=\"column100 column2\" data-column=\"column2\"> <h4><b>Token</b></h4> </th>\n" +
"                                    <th class=\"column100 column3\" data-column=\"column3\"> <h4><b>Linea</b></h4> </th>\n" +
"                                    <th class=\"column100 column4\" data-column=\"column4\"> <h4><b>Columna</b></h4> </th>\n" +
"                                    <th class=\"column100 column5\" data-column=\"column5\"> <h4><b>Archivo</b></h4> </th>\n" +
"                                </tr>\n" +
"                            </thead>\n" +
"                            <tbody>");
            
            for(int i =0; i<listaTokensJS.getSize(); i++)
            {
                pw.println("<tr class=\"row100\">");
                pw.println("<td class=\"column100 column1\" data-column=\"column1\">"+listaTokensJS.getLexema(i)+"</td>");
                pw.println("<td class=\"column100 column2\" data-column=\"column2\">"+listaTokensJS.getToken(i)+"</td>");
                pw.println("<td class=\"column100 column3\" data-column=\"column3\">"+listaTokensJS.getLinea(i)+"</td>");
                pw.println("<td class=\"column100 column4\" data-column=\"column4\">"+listaTokensJS.getColumna(i)+"</td>");
                pw.println("<td class=\"column100 column5\" data-column=\"column5\">"+listaTokensJS.getArchivo(i)+"</td>");
                pw.println("</tr>");
            }
            
            pw.println("</tbody>\n" +
"                        </table>\n" +
"                    </div>");
            pw.println("<div class=\"table100 ver4 m-b-110\">\n" +
"                        <table data-vertable=\"ver4\">\n" +
"                            <thead>\n" +
"                                <tr class=\"row100 head\">\n" +
"                                    <th class=\"column100 column1\" data-column=\"column1\"> <h4><b>Lexema</b></h4> </th>\n" +
"                                    <th class=\"column100 column2\" data-column=\"column2\"> <h4><b>Tipo Error</b></h4> </th>\n" +
"                                    <th class=\"column100 column3\" data-column=\"column3\"> <h4><b>Linea</b></h4> </th>\n" +
"                                    <th class=\"column100 column4\" data-column=\"column4\"> <h4><b>Columna</b></h4> </th>\n" +
"                                    <th class=\"column100 column5\" data-column=\"column5\"> <h4><b>Archivo</b></h4> </th>\n" +
"                                </tr>\n" +
"                            </thead>\n" +
"                            <tbody>");
            
            for(int i =0; i<listaErrores.getSize(); i++)
            {
                pw.println("<tr class=\"row100\">");
                pw.println("<td class=\"column100 column1\" data-column=\"column1\">"+listaErrores.getToken(i)+"</td>");
                pw.println("<td class=\"column100 column2\" data-column=\"column2\">"+listaErrores.getLexema(i)+"</td>");
                pw.println("<td class=\"column100 column3\" data-column=\"column3\">"+listaErrores.getLinea(i)+"</td>");
                pw.println("<td class=\"column100 column4\" data-column=\"column4\">"+listaErrores.getColumna(i)+"</td>");
                pw.println("<td class=\"column100 column5\" data-column=\"column5\">"+listaErrores.getArchivo(i)+"</td>");
                pw.println("</tr>");
            }
            
            pw.println("</tbody>\n" +
"                        </table>\n" +
"                    </div>");
            pw.println("</div>\n" +
"        </section>\n" +
"        <!-- Footer-->\n" +
"        <footer class=\"footer text-center\">\n" +
"            <div class=\"container\">\n" +
"                <div class=\"row\">\n" +
"                    \n" +
"                    <!-- Footer Social Icons-->\n" +
"                    <div class=\"row justify-content-center\">\n" +
"                        <h3 class=\" text-center mb-4\">Eduardo Flores</h3>\n" +
"                        <p class=\"lead mb-0\"><h4>2012-12558</h4></p>");
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss dd/MM/yyyy");
            //System.out.println(dtf.format(LocalDateTime.now()));
            pw.println("<p class=\"lead mb-0\">"+dtf.format(LocalDateTime.now())+"</p>");                       //********************************************************************************************************************
            pw.println("</div>\n" +
"                    <!-- Footer About Text-->\n" +
"                    \n" +
"                </div>\n" +
"            </div>\n" +
"        </footer>\n" +
"        <!-- Copyright Section-->\n" +
"        <div class=\"copyright py-4 text-center text-white\">\n" +
"            <div class=\"container\"><small>Copyright &copy; Eduardo Flores</small></div>\n" +
"        </div>\n" +
"        <!-- Portfolio Modals-->\n" +
"        <!-- Portfolio Modal 1-->\n" +
"        <div class=\"portfolio-modal modal fade\" id=\"portfolioModal1\" tabindex=\"-1\" aria-labelledby=\"portfolioModal1\" aria-hidden=\"true\">\n" +
"            <div class=\"modal-dialog modal-xl\">\n" +
"                <div class=\"modal-content\">\n" +
"                    <div class=\"modal-header border-0\"><button class=\"btn-close\" type=\"button\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div>\n" +
"                    <div class=\"modal-body text-center pb-5\">\n" +
"                        <div class=\"container\">\n" +
"                            <div class=\"row justify-content-center\">\n" +
"                                <div class=\"col-lg-8\">\n" +
"                                    <!-- Portfolio Modal - Title-->\n" +
"                                    <h2 class=\"portfolio-modal-title text-secondary text-uppercase mb-0\">Graficas de Barras</h2>\n" +
"                                    <!-- Icon Divider-->\n" +
"                                    <div class=\"divider-custom\">\n" +
"                                        <div class=\"divider-custom-line\"></div>\n" +
"                                        <div class=\"divider-custom-icon\"><i class=\"fas fa-star\"></i></div>\n" +
"                                        <div class=\"divider-custom-line\"></div>\n" +
"                                    </div>\n" +
"                                    <!-- Portfolio Modal - Image-->\n" +
"                                    <img class=\"img-fluid rounded mb-5\" src=\"assets/img/portfolio/barras.png\"/>");
            for(int i=0; i<grafiacasBarras.size(); i++)
            {
                pw.println("<img class=\"img-fluid rounded mb-5\" src=\""+grafiacasBarras.get(i)+"\"/>");
            }
            pw.println("<!-- Portfolio Modal - Text-->\n" +
"                                    <p class=\"mb-4\"></p>\n" +
"                                    <button class=\"btn btn-primary\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n" +
"                                        <i class=\"fas fa-times fa-fw\"></i>\n" +
"                                        Cerrar\n" +
"                                    </button>\n" +
"                                </div>\n" +
"                            </div>\n" +
"                        </div>\n" +
"                    </div>\n" +
"                </div>\n" +
"            </div>\n" +
"        </div>\n" +
"        <!-- Portfolio Modal 2-->\n" +
"        <div class=\"portfolio-modal modal fade\" id=\"portfolioModal2\" tabindex=\"-1\" aria-labelledby=\"portfolioModal2\" aria-hidden=\"true\">\n" +
"            <div class=\"modal-dialog modal-xl\">\n" +
"                <div class=\"modal-content\">\n" +
"                    <div class=\"modal-header border-0\"><button class=\"btn-close\" type=\"button\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button></div>\n" +
"                    <div class=\"modal-body text-center pb-5\">\n" +
"                        <div class=\"container\">\n" +
"                            <div class=\"row justify-content-center\">\n" +
"                                <div class=\"col-lg-8\">\n" +
"                                    <!-- Portfolio Modal - Title-->\n" +
"                                    <h2 class=\"portfolio-modal-title text-secondary text-uppercase mb-0\">Graficas de Pie</h2>\n" +
"                                    <!-- Icon Divider-->\n" +
"                                    <div class=\"divider-custom\">\n" +
"                                        <div class=\"divider-custom-line\"></div>\n" +
"                                        <div class=\"divider-custom-icon\"><i class=\"fas fa-star\"></i></div>\n" +
"                                        <div class=\"divider-custom-line\"></div>\n" +
"                                    </div>\n" +
"                                    <!-- Portfolio Modal - Image-->\n" +
"                                    <img class=\"img-fluid rounded mb-5\" src=\"assets/img/portfolio/pie.png\" />");
            
            for(int i=0; i<grafiacasPie.size(); i++)
            {
                pw.println("<img class=\"img-fluid rounded mb-5\" src=\""+grafiacasPie.get(i)+"\"/>");
            }
            pw.println("<!-- Portfolio Modal - Text-->\n" +
"                                    <p class=\"mb-4\"></p>\n" +
"                                    <button class=\"btn btn-primary\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\n" +
"                                        <i class=\"fas fa-times fa-fw\"></i>\n" +
"                                        Cerrar\n" +
"                                    </button>\n" +
"                                </div>\n" +
"                            </div>\n" +
"                        </div>\n" +
"                    </div>\n" +
"                </div>\n" +
"            </div>\n" +
"        </div>\n" +
"        \n" +
"        <!-- Bootstrap core JS-->\n" +
"        <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js\"></script>\n" +
"        <!-- Core theme JS-->\n" +
"        <script src=\"js/scripts.js\"></script>\n" +
"        <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->\n" +
"        <!-- * *                               SB Forms JS                               * *-->\n" +
"        <!-- * * Activate your form at https://startbootstrap.com/solution/contact-forms * *-->\n" +
"        <!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *-->\n" +
"        <script src=\"https://cdn.startbootstrap.com/sb-forms-latest.js\"></script>\n" +
"    </body>\n" +
"</html>");
            
            
            
            
            
            pw.close();
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error al grabar archivo" + ex);
        }
        
        
        
        
    }
}
