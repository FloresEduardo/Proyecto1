
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto1;

import java_cup.runtime.Symbol;
import proyecto1.Inicio;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\003\003\000\002\002" +
    "\002\000\002\004\006\000\002\006\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\006\000\002\012\003\000\002\013\006\000\002\013" +
    "\003\000\002\014\004\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\004\000\002\017\005\000" +
    "\002\017\003\000\002\020\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\006\000\002\045" +
    "\004\000\002\045\003\000\002\047\004\000\002\047\003" +
    "\000\002\046\004\000\002\046\004\000\002\021\006\000" +
    "\002\022\003\000\002\035\006\000\002\035\004\000\002" +
    "\040\004\000\002\040\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\034\005\000" +
    "\002\043\004\000\002\044\005\000\002\044\003\000\002" +
    "\025\006\000\002\026\003\000\002\037\006\000\002\037" +
    "\004\000\002\042\004\000\002\042\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\030\006\000" +
    "\002\031\003\000\002\036\006\000\002\036\004\000\002" +
    "\041\004\000\002\041\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\011\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\005\004\001\002\000\004\040\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\016\003\017\004\021\010" +
    "\020\016\023\017\013\023\022\001\002\000\020\003\ufff9" +
    "\004\ufff9\010\ufff9\016\ufff9\017\ufff9\023\ufff9\041\ufff9\001" +
    "\002\000\020\003\ufff8\004\ufff8\010\ufff8\016\ufff8\017\ufff8" +
    "\023\ufff8\041\ufff8\001\002\000\004\040\166\001\002\000" +
    "\004\041\165\001\002\000\020\003\017\004\021\010\020" +
    "\016\023\017\013\023\022\041\uffff\001\002\000\020\003" +
    "\ufffb\004\ufffb\010\ufffb\016\ufffb\017\ufffb\023\ufffb\041\ufffb" +
    "\001\002\000\004\031\160\001\002\000\004\040\136\001" +
    "\002\000\004\040\110\001\002\000\004\033\102\001\002" +
    "\000\004\040\026\001\002\000\020\003\ufffa\004\ufffa\010" +
    "\ufffa\016\ufffa\017\ufffa\023\ufffa\041\ufffa\001\002\000\020" +
    "\003\ufffc\004\ufffc\010\ufffc\016\ufffc\017\ufffc\023\ufffc\041" +
    "\ufffc\001\002\000\014\003\035\011\034\012\032\013\036" +
    "\041\uffff\001\002\000\014\003\035\011\034\012\032\013" +
    "\036\041\uffff\001\002\000\004\025\042\001\002\000\004" +
    "\041\041\001\002\000\004\025\uffc7\001\002\000\004\041" +
    "\uffc9\001\002\000\004\025\uffc8\001\002\000\004\031\040" +
    "\001\002\000\004\025\uffc6\001\002\000\004\041\uffcd\001" +
    "\002\000\014\003\uffcb\011\uffcb\012\uffcb\013\uffcb\041\uffcb" +
    "\001\002\000\020\003\uffce\004\uffce\010\uffce\016\uffce\017" +
    "\uffce\023\uffce\041\uffce\001\002\000\014\026\051\032\043" +
    "\035\045\036\050\037\046\001\002\000\004\040\064\001" +
    "\002\000\004\031\063\001\002\000\010\027\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\010\027\uffe8\030\uffe8\031\uffe8\001" +
    "\002\000\004\031\uffd4\001\002\000\010\027\uffe7\030\uffe7" +
    "\031\uffe7\001\002\000\012\032\043\035\045\036\050\037" +
    "\046\001\002\000\004\031\uffd3\001\002\000\006\027\uffff" +
    "\030\057\001\002\000\004\027\055\001\002\000\004\031" +
    "\uffd2\001\002\000\004\027\uffd1\001\002\000\012\032\043" +
    "\035\045\036\050\037\046\001\002\000\004\027\uffcf\001" +
    "\002\000\006\027\uffff\030\057\001\002\000\004\027\uffd0" +
    "\001\002\000\014\003\uffcc\011\uffcc\012\uffcc\013\uffcc\041" +
    "\uffcc\001\002\000\006\021\067\022\066\001\002\000\004" +
    "\041\100\001\002\000\010\003\072\030\073\041\uffff\001" +
    "\002\000\004\041\uffe4\001\002\000\004\041\uffe5\001\002" +
    "\000\010\003\072\030\073\041\uffff\001\002\000\004\031" +
    "\076\001\002\000\004\037\075\001\002\000\004\041\uffe2" +
    "\001\002\000\010\003\uffe1\030\uffe1\041\uffe1\001\002\000" +
    "\010\003\uffe0\030\uffe0\041\uffe0\001\002\000\004\041\uffe3" +
    "\001\002\000\010\027\uffe6\030\uffe6\031\uffe6\001\002\000" +
    "\004\041\uffca\001\002\000\004\037\103\001\002\000\004" +
    "\030\104\001\002\000\004\037\105\001\002\000\004\034" +
    "\106\001\002\000\004\031\107\001\002\000\020\003\uffbd" +
    "\004\uffbd\010\uffbd\016\uffbd\017\uffbd\023\uffbd\041\uffbd\001" +
    "\002\000\012\003\112\006\113\007\116\041\uffff\001\002" +
    "\000\012\003\112\006\113\007\116\041\uffff\001\002\000" +
    "\012\003\ufff2\006\ufff2\007\ufff2\041\ufff2\001\002\000\004" +
    "\036\uffef\001\002\000\004\041\ufff4\001\002\000\004\041" +
    "\134\001\002\000\004\036\uffee\001\002\000\004\036\121" +
    "\001\002\000\004\041\ufff0\001\002\000\006\024\uffff\030" +
    "\127\001\002\000\004\024\123\001\002\000\012\032\043" +
    "\035\045\036\050\037\046\001\002\000\004\031\125\001" +
    "\002\000\012\003\ufff3\006\ufff3\007\ufff3\041\ufff3\001\002" +
    "\000\004\031\uffea\001\002\000\004\036\132\001\002\000" +
    "\004\024\uffed\001\002\000\004\024\uffeb\001\002\000\006" +
    "\024\uffff\030\127\001\002\000\004\024\uffec\001\002\000" +
    "\020\003\ufff5\004\ufff5\010\ufff5\016\ufff5\017\ufff5\023\ufff5" +
    "\041\ufff5\001\002\000\004\041\ufff1\001\002\000\020\003" +
    "\146\011\144\012\142\013\150\014\140\015\137\041\uffff" +
    "\001\002\000\004\025\uffd5\001\002\000\004\025\uffd6\001" +
    "\002\000\004\041\157\001\002\000\004\025\uffd8\001\002" +
    "\000\004\041\uffda\001\002\000\004\025\uffd9\001\002\000" +
    "\004\041\uffde\001\002\000\004\031\156\001\002\000\020" +
    "\003\146\011\144\012\142\013\150\014\140\015\137\041" +
    "\uffff\001\002\000\004\025\uffd7\001\002\000\004\025\152" +
    "\001\002\000\014\026\051\032\043\035\045\036\050\037" +
    "\046\001\002\000\004\031\154\001\002\000\020\003\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\041\uffdd\001" +
    "\002\000\004\041\uffdb\001\002\000\020\003\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\041\uffdc\001\002\000" +
    "\020\003\uffdf\004\uffdf\010\uffdf\016\uffdf\017\uffdf\023\uffdf" +
    "\041\uffdf\001\002\000\020\003\uffbc\004\uffbc\010\uffbc\016" +
    "\uffbc\017\uffbc\023\uffbc\041\uffbc\001\002\000\004\041\ufff6" +
    "\001\002\000\020\003\017\004\021\010\020\016\023\017" +
    "\013\023\022\041\uffff\001\002\000\004\041\ufffd\001\002" +
    "\000\004\041\ufff7\001\002\000\004\002\ufffe\001\002\000" +
    "\012\003\172\011\175\020\174\041\uffff\001\002\000\004" +
    "\025\202\001\002\000\012\003\172\011\175\020\174\041" +
    "\uffff\001\002\000\004\041\uffc4\001\002\000\004\031\200" +
    "\001\002\000\004\041\177\001\002\000\004\025\uffbe\001" +
    "\002\000\004\025\uffbf\001\002\000\004\041\uffc0\001\002" +
    "\000\020\003\uffc5\004\uffc5\010\uffc5\016\uffc5\017\uffc5\023" +
    "\uffc5\041\uffc5\001\002\000\012\003\uffc2\011\uffc2\020\uffc2" +
    "\041\uffc2\001\002\000\004\041\uffc1\001\002\000\014\026" +
    "\051\032\043\035\045\036\050\037\046\001\002\000\004" +
    "\031\204\001\002\000\012\003\uffc3\011\uffc3\020\uffc3\041" +
    "\uffc3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\003\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\013\007\014\011\024\021\015\025\023\030" +
    "\010\033\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\160\007" +
    "\161\010\162\011\024\021\015\025\023\030\010\033\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\032\026" +
    "\030\027\027\037\026\042\036\001\001\000\012\002\032" +
    "\027\027\037\026\042\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\046" +
    "\024\043\034\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\052\043\053\001\001\000" +
    "\002\001\001\000\006\002\057\044\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\060\001\001\000\002\001\001\000\006\002\057\044\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\064\001\001\000\002\001\001\000\010\002\073\046\070" +
    "\047\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\073\046\070\047\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\117\012\114\013\110\014\113\015\116\001" +
    "\001\000\012\002\117\013\110\014\134\015\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\121\001\001" +
    "\000\002\001\001\000\006\002\130\017\127\001\001\000" +
    "\004\020\123\001\001\000\004\005\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\130" +
    "\017\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\142\022\140\023\150\035\146" +
    "\040\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\142\023\150\035\146\040\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\046\024\152\034\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\160\007\161\010\163\011\024" +
    "\021\015\025\023\030\010\033\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\175" +
    "\031\172\032\166\036\167\041\170\001\001\000\002\001" +
    "\001\000\012\002\175\032\166\036\167\041\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\046\024\202\034\051\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

	//public static Nodo padre;

    public void syntax_error(Symbol s){
        //Inicio.errorSintactico("Sintactico: \t'"+ s.value +"' \tLinea "+(s.left+1)+" \tcolumna "+(s.right));
        Inicio.errorSintactico("Sintactico", ""+s.value, ""+(s.left+1), ""+(s.right+1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
    	//Inicio.errorSintactico("SintacticoNR: \t'"+ s.value +"' \tLinea "+(s.left+1)+" \tcolumna "+(s.right));
    	Inicio.errorSintactico("SintacticoNR", ""+s.value, ""+(s.left+1), ""+(s.right+1));
    }

    public void rutasProyecto(String proyecto1, String proyecto2)
    {
    	Inicio.rutasProyecto(proyecto1, proyecto2);
    }

    public void guardarVariablesGlobales(String tipo, String variable, String valor)
    {
    	Inicio.guardarVariablesGlobales(tipo, variable, valor);
    }

    public void guardarDatosBarras(String caracteristicas)
    {
    	Inicio.guardarDatosBarras(caracteristicas);
    }

    public void guardarDatosPie(String caracteristicas)
    {
    	Inicio.guardarDatosPie(caracteristicas);
    }

    public void guardarDatosLineas(String caracteristicas)
    {
    	Inicio.guardarDatosLineas(caracteristicas);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EPS ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EPS",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= tkGenerarReporteEstadistico tkLlaveA CUERPO tkLlaveC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= SENTC SENTC_ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTC ::= GLOBALES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTC ::= BARRAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTC ::= PIE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTC ::= LINEAS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTC ::= COMPARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTC_ ::= SENTC SENTC_ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC_",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTC_ ::= EPS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTC_",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GLOBALES ::= tkDefinirGlobales tkLlaveA CUERPO_GLOBAL tkLlaveC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GLOBALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_GLOBAL ::= DECLARACIONES_ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_GLOBAL",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= TIPO L_ID ASIG tkPuntoComa 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int x3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			guardarVariablesGlobales(x1, x2, x3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACIONES ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACIONES_ ::= DECLARACIONES DECLARACIONES_ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACIONES_ ::= EPS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= tkString 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= tkDouble 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // L_ID ::= tkId L_ID_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			String datos = x1 + "@" + x2;
							RESULT = datos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // L_ID_ ::= tkComa tkId L_ID_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	String datos = x1 + "@" + x2; 
							RESULT = datos; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID_",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // L_ID_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_ID_",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIG ::= tkIgual EXP 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXP ::= tkNumero 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXP ::= tkCadena 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXP ::= tkId 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXP ::= tkDolar tkLlaveA PUNTAJE tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PUNTAJE ::= tkPuntajeEspecifico ESPECIFICO_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = x1 + "#" + x2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTAJE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PUNTAJE ::= tkPuntajeGeneral 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTAJE",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESPECIFICO_ ::= ESPECIFICO ESPECIFICO_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = x1 + "#" + x2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIFICO_",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESPECIFICO_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIFICO_",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESPECIFICO ::= tkComa tkCadena 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIFICO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESPECIFICO ::= error tkPuntoComa 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESPECIFICO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BARRAS ::= tkGraficaBarras tkLlaveA CUERPO_BARRAS tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			guardarDatosBarras(x1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARRAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_BARRAS ::= DECLARACIONES_B_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_BARRAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONES_B ::= CARACTERISTICA_B tkDosPuntos VALOR tkPuntoComa 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			//guardarDatosBarras(x1); 
							RESULT = x1 + "@" + x2;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_B",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONES_B ::= error tkPuntoComa 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_B",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONES_B_ ::= DECLARACIONES_B DECLARACIONES_B_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
							RESULT = x1 + "@@" + x2;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_B_",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONES_B_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_B_",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTERISTICA_B ::= tkTitulo 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_B",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTERISTICA_B ::= tkEjeX 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_B",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CARACTERISTICA_B ::= tkValores 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_B",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CARACTERISTICA_B ::= tkTituloX 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_B",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CARACTERISTICA_B ::= tkTituloY 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_B",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VALOR ::= EXP 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALOR ::= ARRAY 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "array@" + x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARRAY ::= tkCorcheteA CUERPO_A tkCorcheteC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPO_A ::= EXP CUERPO_A_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = x1 + "@" + x2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_A",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPO_A_ ::= tkComa EXP CUERPO_A_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = x1 + "@" + x2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_A_",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPO_A_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_A_",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PIE ::= tkGraficaPie tkLlaveA CUERPO_PIE tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			guardarDatosPie(x1);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PIE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPO_PIE ::= DECLARACIONES_P_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_PIE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACIONES_P ::= CARACTERISTICA_P tkDosPuntos VALOR tkPuntoComa 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			//guardarDatosPie(x1,x2); 
							RESULT = x1 + "@" + x2;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACIONES_P ::= error tkPuntoComa 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_P",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACIONES_P_ ::= DECLARACIONES_P DECLARACIONES_P_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = x1 + "@@" + x2;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_P_",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACIONES_P_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_P_",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CARACTERISTICA_P ::= tkTitulo 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_P",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CARACTERISTICA_P ::= tkEjeX 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_P",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CARACTERISTICA_P ::= tkValores 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_P",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LINEAS ::= tkGraficaLineas tkLlaveA CUERPO_LINEAS tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			guardarDatosLineas(x1);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEAS",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUERPO_LINEAS ::= DECLARACIONES_L_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_LINEAS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACIONES_L ::= CARACTERISTICA_L tkDosPuntos VALOR tkPuntoComa 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			//guardarDatosLineas(x1,x2); 
							RESULT = x1 + "@" + x2;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_L",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACIONES_L ::= error tkPuntoComa 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_L",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACIONES_L_ ::= DECLARACIONES_L DECLARACIONES_L_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
							RESULT = x1 + "@@" + x2;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_L_",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACIONES_L_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES_L_",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CARACTERISTICA_L ::= tkTitulo 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_L",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CARACTERISTICA_L ::= tkArchivo 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_L",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COMPARE ::= tkCompare tkParentesisA tkCadena tkComa tkCadena tkParentesisC tkPuntoComa 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 Inicio.rutasProyecto(x1,x2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COMPARE ::= error tkPuntoComa 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("COMPARE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
