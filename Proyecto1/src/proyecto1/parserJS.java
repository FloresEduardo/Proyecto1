
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package proyecto1;

import java_cup.runtime.Symbol;
import proyecto1.Inicio;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symJS.class;
}

  /** Default constructor. */
  @Deprecated
  public parserJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\003\002\000\002\036" +
    "\003\000\002\036\003\000\002\004\007\000\002\005\003" +
    "\000\002\061\004\000\002\061\003\000\002\055\005\000" +
    "\002\055\003\000\002\007\011\000\002\006\005\000\002" +
    "\002\003\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\035\006\000\002\056\005\000" +
    "\002\056\003\000\002\062\005\000\002\062\003\000\002" +
    "\063\005\000\002\064\003\000\002\064\004\000\002\064" +
    "\004\000\002\064\003\000\002\065\005\000\002\042\003" +
    "\000\002\043\004\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\004\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\004\000\002\044" +
    "\005\000\002\045\012\000\002\066\004\000\002\066\003" +
    "\000\002\032\006\000\002\032\003\000\002\034\012\000" +
    "\002\033\011\000\002\046\011\000\002\050\011\000\002" +
    "\051\004\000\002\052\007\000\002\053\007\000\002\053" +
    "\003\000\002\054\005\000\002\047\012\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\067\004\000\002\067\003\000\002\067\003\000\002" +
    "\040\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\003\000\002\010\004\000\002\010\003\000\002\012\005" +
    "\000\002\012\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\004\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\003\000\002\021\005\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\003\000\002\026\004" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\006\000\002\027\005\000\002\027" +
    "\005\000\002\027\003\000\002\030\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\057\004\000" +
    "\002\057\003\000\002\060\005\000\002\060\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\004\005\001\002\000\004\002\370\001" +
    "\002\000\004\057\006\001\002\000\004\040\007\001\002" +
    "\000\016\005\021\006\010\007\016\020\020\041\000\057" +
    "\000\001\002\000\004\057\ufff1\001\002\000\004\041\367" +
    "\001\002\000\006\041\ufffa\057\uffee\001\002\000\016\005" +
    "\021\006\010\007\016\020\020\041\000\057\000\001\002" +
    "\000\004\057\146\001\002\000\016\005\ufff8\006\ufff8\007" +
    "\ufff8\020\ufff8\041\ufff8\057\ufff8\001\002\000\004\057\ufff0" +
    "\001\002\000\004\041\ufffc\001\002\000\004\055\022\001" +
    "\002\000\004\057\uffef\001\002\000\004\021\023\001\002" +
    "\000\004\036\024\001\002\000\030\023\030\024\027\025" +
    "\037\026\050\032\045\036\047\043\033\056\031\057\032" +
    "\060\025\061\046\001\002\000\102\005\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\022\uff9e\027\uff9e\030\uff9e\031\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\057\uff9e\001\002\000\102\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\022\uff96\027\uff96\030\uff96" +
    "\031\uff96\033\uff96\034\uff96\035\uff96\037\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\057\uff96\001\002\000" +
    "\102\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\057\uff9a" +
    "\001\002\000\004\036\143\001\002\000\102\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\022\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\037\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\057\uff9f\001\002\000\106" +
    "\005\000\006\000\007\000\010\000\012\000\013\000\014" +
    "\000\015\000\016\000\017\000\020\000\022\000\027\000" +
    "\030\000\031\000\033\000\034\000\035\000\036\133\037" +
    "\000\041\000\042\000\043\000\044\000\045\000\046\000" +
    "\047\000\050\000\051\000\052\000\053\000\054\000\055" +
    "\136\057\000\001\002\000\026\023\030\024\027\025\037" +
    "\026\050\032\045\036\047\056\031\057\032\060\025\061" +
    "\046\001\002\000\006\037\126\042\066\001\002\000\102" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\057\uffa0\001" +
    "\002\000\102\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\022" +
    "\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\057\uffa2\001\002\000\102\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\057\uff9c\001\002\000\102\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\020\uffa4\022\uffa4\027\uffa4\030\uffa4\031\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\037\uffa4\041\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\112\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\057\uffa4\001\002\000\100\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\110\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\001\002\000\076" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\106\045\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\057\uffa8\001\002\000\074\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\022\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\037\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\045\104\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\057\uffaa\001\002\000\072\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\020\uffac\022\uffac\027\uffac\030\uffac\031\uffac" +
    "\033\uffac\034\uffac\035\uffac\037\uffac\041\uffac\042\uffac\043" +
    "\102\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\057\uffac" +
    "\001\002\000\032\023\030\024\027\025\037\026\050\032" +
    "\045\033\000\036\047\043\033\056\031\057\032\060\025" +
    "\061\046\001\002\000\102\005\uff9d\006\uff9d\007\uff9d\010" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\022\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d" +
    "\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\057\uff9d\001\002\000\032\023\030\024\027" +
    "\025\037\026\050\032\045\036\047\043\033\050\056\056" +
    "\031\057\032\060\025\061\046\001\002\000\102\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\057\uff9b\001\002\000" +
    "\062\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\022\uffb5\027" +
    "\uffb5\030\065\035\uffb5\037\uffb5\041\uffb5\042\066\050\067" +
    "\051\uffb5\052\uffb5\053\072\054\070\057\uffb5\001\002\000" +
    "\050\005\uffb6\006\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\027" +
    "\uffb6\035\uffb6\037\uffb6\041\uffb6\051\uffb6\052\uffb6\057\uffb6" +
    "\001\002\000\050\005\uffb8\006\uffb8\007\uffb8\010\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\022\uffb8\027\uffb8\035\uffb8\037\uffb8\041\uffb8\051\uffb8\052" +
    "\uffb8\057\uffb8\001\002\000\050\005\uffba\006\uffba\007\uffba" +
    "\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\022\uffba\027\uffba\035\uffba\037\uffba\041\uffba" +
    "\051\063\052\uffba\057\uffba\001\002\000\006\037\060\052" +
    "\061\001\002\000\030\023\030\024\027\025\037\026\050" +
    "\032\045\036\047\043\033\056\031\057\032\060\025\061" +
    "\046\001\002\000\050\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\022\uffb7\027\uffb7\035\uffb7\037\uffb7\041\uffb7\051\uffb7" +
    "\052\uffb7\057\uffb7\001\002\000\102\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98" +
    "\017\uff98\020\uff98\022\uff98\027\uff98\030\uff98\031\uff98\033" +
    "\uff98\034\uff98\035\uff98\037\uff98\041\uff98\042\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052" +
    "\uff98\053\uff98\054\uff98\057\uff98\001\002\000\032\023\030" +
    "\024\027\025\037\026\050\032\045\036\047\043\033\050" +
    "\056\056\031\057\032\060\025\061\046\001\002\000\050" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022\uffbb\027\uffbb" +
    "\035\uffbb\037\uffbb\041\uffbb\051\063\052\uffbb\057\uffbb\001" +
    "\002\000\032\023\030\024\027\025\037\026\050\032\045" +
    "\036\047\043\033\050\056\056\031\057\032\060\025\061" +
    "\046\001\002\000\050\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\022\uffb9\027\uffb9\035\uffb9\037\uffb9\041\uffb9\051\uffb9" +
    "\052\uffb9\057\uffb9\001\002\000\004\030\114\001\002\000" +
    "\030\023\030\024\027\025\037\026\050\032\045\036\047" +
    "\043\033\056\031\057\032\060\025\061\046\001\002\000" +
    "\004\030\100\001\002\000\032\023\000\024\000\025\000" +
    "\026\000\030\073\032\000\036\000\043\000\056\000\057" +
    "\000\060\000\061\000\001\002\000\030\023\030\024\027" +
    "\025\037\026\050\032\045\036\047\043\033\056\031\057" +
    "\032\060\025\061\046\001\002\000\032\023\000\024\000" +
    "\025\000\026\000\030\073\032\000\036\000\043\000\056" +
    "\000\057\000\060\000\061\000\001\002\000\030\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\032\uffaf\036\uffaf\043\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002\000\030\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\032\uffae\036\uffae\043\uffae\056" +
    "\uffae\057\uffae\060\uffae\061\uffae\001\002\000\030\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\032\uffb3\036\uffb3\043\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\001\002\000\052\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\017\uffb4\020\uffb4\022\uffb4\027\uffb4\035\uffb4" +
    "\037\uffb4\041\uffb4\042\066\051\uffb4\052\uffb4\057\uffb4\001" +
    "\002\000\030\023\uffb2\024\uffb2\025\uffb2\026\uffb2\032\uffb2" +
    "\036\uffb2\043\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\001" +
    "\002\000\030\023\uffb0\024\uffb0\025\uffb0\026\uffb0\032\uffb0" +
    "\036\uffb0\043\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001" +
    "\002\000\072\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad" +
    "\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\022" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\037\uffad\041\uffad\042\uffad\043\102\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\054\uffad\057\uffad\001\002\000\030\023\030" +
    "\024\027\025\037\026\050\032\045\036\047\043\033\056" +
    "\031\057\032\060\025\061\046\001\002\000\074\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\022\uffab\027\uffab\030\uffab" +
    "\031\uffab\033\uffab\034\uffab\035\uffab\037\uffab\041\uffab\042" +
    "\uffab\043\uffab\045\104\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\057\uffab\001\002\000\030\023\030\024\027\025" +
    "\037\026\050\032\045\036\047\043\033\056\031\057\032" +
    "\060\025\061\046\001\002\000\076\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\022\uffa9\027\uffa9\030\uffa9\031\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9" +
    "\044\106\045\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\057\uffa9\001\002\000\030\023\030\024\027\025\037" +
    "\026\050\032\045\036\047\043\033\056\031\057\032\060" +
    "\025\061\046\001\002\000\100\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\022\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\110\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\057\uffa7\001\002\000\030\023\030\024\027\025" +
    "\037\026\050\032\045\036\047\043\033\056\031\057\032" +
    "\060\025\061\046\001\002\000\102\005\uffa5\006\uffa5\007" +
    "\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\112\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\057\uffa5\001\002\000\030\023\030" +
    "\024\027\025\037\026\050\032\045\036\047\043\033\056" +
    "\031\057\032\060\025\061\046\001\002\000\102\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\057\uffa3\001\002\000" +
    "\030\023\uffb1\024\uffb1\025\uffb1\026\uffb1\032\uffb1\036\uffb1" +
    "\043\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000" +
    "\012\033\000\034\122\037\000\042\066\001\002\000\004" +
    "\033\120\001\002\000\006\033\uff90\037\uff90\001\002\000" +
    "\102\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\022\uff97\027" +
    "\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035\uff97\037\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\057\uff97" +
    "\001\002\000\006\033\uff91\037\uff91\001\002\000\030\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\043\033" +
    "\056\031\057\032\060\025\061\046\001\002\000\006\033" +
    "\uff8e\037\uff8e\001\002\000\012\033\000\034\122\037\000" +
    "\042\066\001\002\000\006\033\uff8f\037\uff8f\001\002\000" +
    "\042\005\000\006\000\007\000\010\000\012\000\013\000" +
    "\014\000\015\000\016\000\017\000\020\000\022\000\027" +
    "\000\035\130\041\000\057\000\001\002\000\040\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\022\ufff7\027\ufff7\041\ufff7" +
    "\057\ufff7\001\002\000\040\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\022\uffff\027\uffff\041\uffff\057\uffff\001\002\000" +
    "\040\005\ufffe\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\022\ufffe\027" +
    "\ufffe\041\ufffe\057\ufffe\001\002\000\102\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\020\uffa1\022\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\037\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\057\uffa1\001\002\000\032\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\037\000" +
    "\043\033\056\031\057\032\060\025\061\046\001\002\000" +
    "\102\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95\013\uff95" +
    "\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\022\uff95\027" +
    "\uff95\030\uff95\031\uff95\033\uff95\034\uff95\035\uff95\037\uff95" +
    "\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047" +
    "\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95\057\uff95" +
    "\001\002\000\102\005\uff92\006\uff92\007\uff92\010\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\022\uff92\027\uff92\030\uff92\031\uff92\033\uff92\034\uff92\035" +
    "\uff92\037\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\057\uff92\001\002\000\004\057\137\001\002\000\106" +
    "\005\000\006\000\007\000\010\000\012\000\013\000\014" +
    "\000\015\000\016\000\017\000\020\000\022\000\027\000" +
    "\030\000\031\000\033\000\034\000\035\000\036\133\037" +
    "\000\041\000\042\000\043\000\044\000\045\000\046\000" +
    "\047\000\050\000\051\000\052\000\053\000\054\000\055" +
    "\136\057\000\001\002\000\102\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\022\uff94\027\uff94\030\uff94\031\uff94\033\uff94" +
    "\034\uff94\035\uff94\037\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\057\uff94\001\002\000\004\037\142\001" +
    "\002\000\102\005\uff93\006\uff93\007\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\022" +
    "\uff93\027\uff93\030\uff93\031\uff93\033\uff93\034\uff93\035\uff93" +
    "\037\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046" +
    "\uff93\047\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\057\uff93\001\002\000\004\060\144\001\002\000\004\037" +
    "\145\001\002\000\102\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\022\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034\uff99" +
    "\035\uff99\037\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\057\uff99\001\002\000\034\005\000\006\000\007" +
    "\000\020\000\030\000\034\150\035\000\036\000\041\000" +
    "\042\000\043\000\055\154\057\000\001\002\000\016\005" +
    "\ufff9\006\ufff9\007\ufff9\020\ufff9\041\ufff9\057\ufff9\001\002" +
    "\000\004\057\364\001\002\000\052\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\020\uffc1\022\uffc1\027\uffc1\030\uffc1\035\uffc1\036" +
    "\uffc1\041\uffc1\042\uffc1\043\uffc1\057\uffc1\001\002\000\030" +
    "\005\000\006\000\007\000\020\000\030\161\035\000\036" +
    "\162\041\000\042\160\043\163\057\000\001\002\000\052" +
    "\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\022\uffbe\027\uffbe" +
    "\030\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe\043\uffbe\057" +
    "\uffbe\001\002\000\004\057\155\001\002\000\056\005\000" +
    "\006\000\007\000\010\000\012\000\013\000\014\000\015" +
    "\000\016\000\017\000\020\000\022\000\027\000\030\000" +
    "\034\150\035\000\036\000\041\000\042\000\043\000\055" +
    "\154\057\000\001\002\000\052\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\022\uffbf\027\uffbf\030\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\057\uffbf\001\002\000\020\005" +
    "\ufff2\006\ufff2\007\ufff2\020\ufff2\035\ufff2\041\ufff2\057\ufff2" +
    "\001\002\000\004\042\363\001\002\000\032\023\030\024" +
    "\027\025\037\026\050\032\045\036\047\043\033\050\056" +
    "\056\031\057\032\060\025\061\046\001\002\000\032\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\037\000" +
    "\043\033\056\031\057\032\060\025\061\046\001\002\000" +
    "\004\043\170\001\002\000\020\005\000\006\000\007\000" +
    "\020\000\035\130\041\000\057\000\001\002\000\042\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\022\uffbc\027\uffbc\035" +
    "\uffbc\041\uffbc\057\uffbc\001\002\000\020\005\ufff5\006\ufff5" +
    "\007\ufff5\020\ufff5\035\ufff5\041\ufff5\057\ufff5\001\002\000" +
    "\016\005\ufff6\006\ufff6\007\ufff6\020\ufff6\041\ufff6\057\ufff6" +
    "\001\002\000\020\005\ufff3\006\ufff3\007\ufff3\020\ufff3\035" +
    "\ufff3\041\ufff3\057\ufff3\001\002\000\004\037\172\001\002" +
    "\000\022\005\000\006\000\007\000\020\000\035\000\040" +
    "\174\041\000\057\000\001\002\000\020\005\uffed\006\uffed" +
    "\007\uffed\020\uffed\035\uffed\041\uffed\057\uffed\001\002\000" +
    "\034\005\021\006\010\007\016\010\177\012\210\013\207" +
    "\014\201\015\215\020\020\022\220\027\213\041\000\057" +
    "\000\001\002\000\020\005\uffeb\006\uffeb\007\uffeb\020\uffeb" +
    "\035\uffeb\041\uffeb\057\uffeb\001\002\000\004\041\361\001" +
    "\002\000\004\036\342\001\002\000\040\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\027\uffdc\041\uffdc\057\uffdc" +
    "\001\002\000\004\040\333\001\002\000\040\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\022\uffe9\027\uffe9\041\uffe9\057" +
    "\uffe9\001\002\000\040\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\022\uffda\027\uffda\041\uffda\057\uffda\001\002\000\040" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\020\uffde\022\uffde\027\uffde" +
    "\041\uffde\057\uffde\001\002\000\004\057\315\001\002\000" +
    "\040\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\027" +
    "\uffdf\041\uffdf\057\uffdf\001\002\000\004\036\307\001\002" +
    "\000\004\036\254\001\002\000\042\005\000\006\000\007" +
    "\000\010\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\020\000\022\000\027\000\035\130\041\000\057" +
    "\000\001\002\000\012\016\uffe0\017\uffe0\041\uffe0\057\uffee" +
    "\001\002\000\030\023\030\024\027\025\037\026\050\032" +
    "\045\036\047\043\033\056\031\057\032\060\025\061\046" +
    "\001\002\000\010\016\uffe2\017\uffe2\041\uffe2\001\002\000" +
    "\004\036\223\001\002\000\040\005\021\006\010\007\016" +
    "\010\177\012\210\013\207\014\201\015\215\016\000\017" +
    "\000\020\020\022\220\027\213\041\000\057\000\001\002" +
    "\000\040\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\027\uffdb\041\uffdb\057\uffdb\001\002\000\042\005\000\006" +
    "\000\007\000\010\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\022\000\027\000\035\130\041" +
    "\000\057\000\001\002\000\040\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\022\uffd9\027\uffd9\041\uffd9\057\uffd9\001\002" +
    "\000\010\016\uffe1\017\uffe1\041\uffe1\001\002\000\030\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\043\033" +
    "\056\031\057\032\060\025\061\046\001\002\000\006\037" +
    "\225\042\066\001\002\000\004\040\226\001\002\000\004" +
    "\016\227\001\002\000\030\023\030\024\027\025\037\026" +
    "\050\032\045\036\047\043\033\056\031\057\032\060\025" +
    "\061\046\001\002\000\004\041\236\001\002\000\004\017" +
    "\233\001\002\000\004\041\uffce\001\002\000\004\031\234" +
    "\001\002\000\034\005\021\006\010\007\016\010\177\012" +
    "\210\013\207\014\201\015\215\020\020\022\220\027\213" +
    "\041\000\057\000\001\002\000\004\041\uffca\001\002\000" +
    "\040\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\027" +
    "\uffcf\041\uffcf\057\uffcf\001\002\000\006\031\240\042\066" +
    "\001\002\000\036\005\021\006\010\007\016\010\177\012" +
    "\210\013\207\014\201\015\215\016\000\017\000\020\020" +
    "\022\220\027\213\057\000\001\002\000\006\016\242\017" +
    "\000\001\002\000\030\023\030\024\027\025\037\026\050" +
    "\032\045\036\047\043\033\056\031\057\032\060\025\061" +
    "\046\001\002\000\004\017\uffcd\001\002\000\004\017\uffcb" +
    "\001\002\000\006\031\246\042\066\001\002\000\036\005" +
    "\021\006\010\007\016\010\177\012\210\013\207\014\201" +
    "\015\215\016\000\017\000\020\020\022\220\027\213\057" +
    "\000\001\002\000\006\016\242\017\000\001\002\000\004" +
    "\017\uffcc\001\002\000\044\005\000\006\000\007\000\010" +
    "\000\012\000\013\000\014\000\015\000\016\000\017\000" +
    "\020\000\022\000\027\000\035\130\041\000\042\066\057" +
    "\000\001\002\000\040\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\022\uffd8\027\uffd8\041\uffd8\057\uffd8\001\002\000\040" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\022\uffdd\027\uffdd" +
    "\041\uffdd\057\uffdd\001\002\000\012\005\021\006\010\007" +
    "\016\057\000\001\002\000\004\037\303\001\002\000\004" +
    "\057\260\001\002\000\004\057\uffee\001\002\000\006\030" +
    "\161\035\000\001\002\000\004\035\262\001\002\000\032" +
    "\023\030\024\027\025\037\026\050\032\045\036\047\043" +
    "\033\050\056\056\031\057\032\060\025\061\046\001\002" +
    "\000\006\035\264\052\061\001\002\000\004\057\265\001" +
    "\002\000\012\030\267\042\266\043\270\044\272\001\002" +
    "\000\010\030\273\042\274\043\275\001\002\000\030\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\043\033" +
    "\056\031\057\032\060\025\061\046\001\002\000\010\030" +
    "\273\042\274\043\275\001\002\000\004\037\uffc9\001\002" +
    "\000\010\030\273\042\274\043\275\001\002\000\030\023" +
    "\030\024\027\025\037\026\050\032\045\036\047\043\033" +
    "\056\031\057\032\060\025\061\046\001\002\000\004\037" +
    "\uffc3\001\002\000\004\037\uffc2\001\002\000\004\037\uffc6" +
    "\001\002\000\006\037\uffc4\042\066\001\002\000\004\037" +
    "\uffc7\001\002\000\006\037\uffc5\042\066\001\002\000\004" +
    "\037\uffc8\001\002\000\004\040\304\001\002\000\034\005" +
    "\021\006\010\007\016\010\177\012\210\013\207\014\201" +
    "\015\215\020\020\022\220\027\213\041\000\057\000\001" +
    "\002\000\004\041\306\001\002\000\040\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\022\uffd0\027\uffd0\041\uffd0\057\uffd0" +
    "\001\002\000\032\023\030\024\027\025\037\026\050\032" +
    "\045\036\047\043\033\050\056\056\031\057\032\060\025" +
    "\061\046\001\002\000\006\037\311\052\061\001\002\000" +
    "\004\040\312\001\002\000\034\005\021\006\010\007\016" +
    "\010\177\012\210\013\207\014\201\015\215\020\020\022" +
    "\220\027\213\041\000\057\000\001\002\000\004\041\314" +
    "\001\002\000\040\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\027\uffd1\041\uffd1\057\uffd1\001\002\000\056\005" +
    "\000\006\000\007\000\010\000\012\000\013\000\014\000" +
    "\015\000\016\000\017\000\020\000\022\000\027\000\030" +
    "\000\034\150\035\000\036\000\041\000\042\000\043\000" +
    "\055\154\057\000\001\002\000\040\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\022\uffea\027\uffea\041\uffea\057\uffea\001" +
    "\002\000\052\005\000\006\000\007\000\010\000\012\000" +
    "\013\000\014\000\015\000\016\000\017\000\020\000\022" +
    "\000\027\000\030\161\035\000\036\321\041\000\042\320" +
    "\043\322\057\000\001\002\000\004\042\332\001\002\000" +
    "\032\023\030\024\027\025\037\026\050\032\045\036\047" +
    "\037\000\043\033\056\031\057\032\060\025\061\046\001" +
    "\002\000\004\043\327\001\002\000\042\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\022\uffe4\027\uffe4\035\uffe4\041\uffe4" +
    "\057\uffe4\001\002\000\042\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\022\uffe7\027\uffe7\035\uffe7\041\uffe7\057\uffe7\001" +
    "\002\000\042\005\000\006\000\007\000\010\000\012\000" +
    "\013\000\014\000\015\000\016\000\017\000\020\000\022" +
    "\000\027\000\035\130\041\000\057\000\001\002\000\040" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\027\uffe8" +
    "\041\uffe8\057\uffe8\001\002\000\042\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\027\uffe5\035\uffe5\041\uffe5\057" +
    "\uffe5\001\002\000\004\037\331\001\002\000\042\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\027\uffe3\035\uffe3" +
    "\041\uffe3\057\uffe3\001\002\000\042\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\027\uffe6\035\uffe6\041\uffe6\057" +
    "\uffe6\001\002\000\034\005\021\006\010\007\016\010\177" +
    "\012\210\013\207\014\201\015\215\020\020\022\220\027" +
    "\213\041\000\057\000\001\002\000\004\041\335\001\002" +
    "\000\004\013\336\001\002\000\004\036\337\001\002\000" +
    "\032\023\030\024\027\025\037\026\050\032\045\036\047" +
    "\043\033\050\056\056\031\057\032\060\025\061\046\001" +
    "\002\000\006\037\341\052\061\001\002\000\042\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2\027\uffd2\035\uffd2" +
    "\041\uffd2\057\uffd2\001\002\000\032\023\030\024\027\025" +
    "\037\026\050\032\045\036\047\043\033\050\056\056\031" +
    "\057\032\060\025\061\046\001\002\000\006\037\344\052" +
    "\061\001\002\000\004\040\345\001\002\000\034\005\021" +
    "\006\010\007\016\010\177\012\210\013\207\014\201\015" +
    "\215\020\020\022\220\027\213\041\000\057\000\001\002" +
    "\000\004\041\347\001\002\000\042\005\000\006\000\007" +
    "\000\010\000\011\350\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\020\000\022\000\027\000\041\000\057" +
    "\000\001\002\000\006\010\177\040\354\001\002\000\040" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022\uffd7\027\uffd7" +
    "\041\uffd7\057\uffd7\001\002\000\040\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\022\uffd5\027\uffd5\041\uffd5\057\uffd5\001" +
    "\002\000\040\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022" +
    "\uffd6\027\uffd6\041\uffd6\057\uffd6\001\002\000\034\005\021" +
    "\006\010\007\016\010\177\012\210\013\207\014\201\015" +
    "\215\020\020\022\220\027\213\041\000\057\000\001\002" +
    "\000\040\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\022\uffd3" +
    "\027\uffd3\041\uffd3\057\uffd3\001\002\000\004\041\357\001" +
    "\002\000\042\005\000\006\000\007\000\010\000\011\350" +
    "\012\000\013\000\014\000\015\000\016\000\017\000\020" +
    "\000\022\000\027\000\041\000\057\000\001\002\000\040" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\022\uffd4\027\uffd4" +
    "\041\uffd4\057\uffd4\001\002\000\020\005\uffec\006\uffec\007" +
    "\uffec\020\uffec\035\uffec\041\uffec\057\uffec\001\002\000\044" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\027\uffbd" +
    "\035\uffbd\041\uffbd\052\061\057\uffbd\001\002\000\020\005" +
    "\ufff4\006\ufff4\007\ufff4\020\ufff4\035\ufff4\041\ufff4\057\ufff4" +
    "\001\002\000\056\005\000\006\000\007\000\010\000\012" +
    "\000\013\000\014\000\015\000\016\000\017\000\020\000" +
    "\022\000\027\000\030\000\034\150\035\000\036\000\041" +
    "\000\042\000\043\000\055\154\057\000\001\002\000\052" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\027\uffc0" +
    "\030\uffc0\035\uffc0\036\uffc0\041\uffc0\042\uffc0\043\uffc0\057" +
    "\uffc0\001\002\000\004\041\ufffb\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\004\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\011\005\010" +
    "\007\014\037\013\055\012\061\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\011" +
    "\007\014\037\013\055\012\061\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\033\021\043\022\042\023\041" +
    "\024\040\025\037\026\035\027\034\030\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\134\031\133\001" +
    "\001\000\006\027\131\030\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\116\020\114\021" +
    "\043\022\042\023\041\024\040\025\037\026\035\027\034" +
    "\030\025\057\115\001\001\000\002\001\001\000\034\012" +
    "\054\013\053\014\052\015\051\020\050\021\043\022\042" +
    "\023\041\024\040\025\037\026\035\027\034\030\025\001" +
    "\001\000\002\001\001\000\004\016\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\015\056\020\050\021\043\022\042\023\041" +
    "\024\040\025\037\026\035\027\034\030\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\013\061\014\052" +
    "\015\051\020\050\021\043\022\042\023\041\024\040\025" +
    "\037\026\035\027\034\030\025\001\001\000\002\001\001" +
    "\000\030\014\063\015\051\020\050\021\043\022\042\023" +
    "\041\024\040\025\037\026\035\027\034\030\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\100\022" +
    "\042\023\041\024\040\025\037\026\035\027\034\030\025" +
    "\001\001\000\002\001\001\000\006\003\073\017\076\001" +
    "\001\000\024\020\075\021\043\022\042\023\041\024\040" +
    "\025\037\026\035\027\034\030\025\001\001\000\006\003" +
    "\073\017\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\022\102\023\041" +
    "\024\040\025\037\026\035\027\034\030\025\001\001\000" +
    "\002\001\001\000\016\023\104\024\040\025\037\026\035" +
    "\027\034\030\025\001\001\000\002\001\001\000\014\024" +
    "\106\025\037\026\035\027\034\030\025\001\001\000\002" +
    "\001\001\000\012\025\110\026\035\027\034\030\025\001" +
    "\001\000\002\001\001\000\010\026\112\027\034\030\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\122\060\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\123\021" +
    "\043\022\042\023\041\024\040\025\037\026\035\027\034" +
    "\030\025\001\001\000\002\001\001\000\006\003\122\060" +
    "\124\001\001\000\002\001\001\000\006\003\130\036\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\116\020\114\021\043" +
    "\022\042\023\041\024\040\025\037\026\035\027\034\030" +
    "\025\057\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\134\031\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\152\006\146\040\151\041\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\163\003" +
    "\164\010\165\035\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\152\041\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\361" +
    "\013\053\014\052\015\051\020\050\021\043\022\042\023" +
    "\041\024\040\025\037\026\035\027\034\030\025\001\001" +
    "\000\030\003\116\020\114\021\043\022\042\023\041\024" +
    "\040\025\037\026\035\027\034\030\025\057\170\001\001" +
    "\000\002\001\001\000\006\003\130\036\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\174\056\172\001" +
    "\001\000\002\001\001\000\032\003\211\007\201\033\177" +
    "\034\210\037\204\042\175\043\213\044\215\045\203\046" +
    "\216\050\202\062\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\130\036\252\001\001\000\002" +
    "\001\001\000\024\020\250\021\043\022\042\023\041\024" +
    "\040\025\037\026\035\027\034\030\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\211\007\201\033" +
    "\177\034\210\037\204\043\221\044\215\045\203\046\216" +
    "\050\202\062\205\001\001\000\002\001\001\000\006\003" +
    "\130\036\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\020\223\021\043\022\042\023\041\024\040\025" +
    "\037\026\035\027\034\030\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\051\227\052\230\001\001\000" +
    "\024\020\236\021\043\022\042\023\041\024\040\025\037" +
    "\026\035\027\034\030\025\001\001\000\002\001\001\000" +
    "\004\054\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\211\007\201\033\177\034\210\037\204\042" +
    "\234\043\213\044\215\045\203\046\216\050\202\062\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\211\007\201\033\177\034\210\037\204" +
    "\042\240\043\213\044\215\045\203\046\216\050\202\062" +
    "\205\001\001\000\006\003\243\053\242\001\001\000\024" +
    "\020\244\021\043\022\042\023\041\024\040\025\037\026" +
    "\035\027\034\030\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\211\007\201\033" +
    "\177\034\210\037\204\042\246\043\213\044\215\045\203" +
    "\046\216\050\202\062\205\001\001\000\006\003\243\053" +
    "\247\001\001\000\002\001\001\000\006\003\130\036\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\256\037\255\047\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\164\010\260\001" +
    "\001\000\002\001\001\000\034\012\262\013\053\014\052" +
    "\015\051\020\050\021\043\022\042\023\041\024\040\025" +
    "\037\026\035\027\034\030\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\270\001\001\000\004\067" +
    "\301\001\001\000\024\020\300\021\043\022\042\023\041" +
    "\024\040\025\037\026\035\027\034\030\025\001\001\000" +
    "\004\067\277\001\001\000\002\001\001\000\004\067\275" +
    "\001\001\000\024\020\276\021\043\022\042\023\041\024" +
    "\040\025\037\026\035\027\034\030\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\211\007\201\033\177\034" +
    "\210\037\204\042\304\043\213\044\215\045\203\046\216" +
    "\050\202\062\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\307\013\053\014\052\015\051\020\050" +
    "\021\043\022\042\023\041\024\040\025\037\026\035\027" +
    "\034\030\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\211\007\201\033\177\034\210\037\204\042" +
    "\312\043\213\044\215\045\203\046\216\050\202\062\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\152\040\316\041\150\063\315\001\001\000\002\001\001" +
    "\000\012\003\164\010\323\064\324\065\322\001\001\000" +
    "\002\001\001\000\030\003\116\020\114\021\043\022\042" +
    "\023\041\024\040\025\037\026\035\027\034\030\025\057" +
    "\327\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\130\036\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\211\007\201\033\177\034" +
    "\210\037\204\042\333\043\213\044\215\045\203\046\216" +
    "\050\202\062\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\012\337\013\053\014\052" +
    "\015\051\020\050\021\043\022\042\023\041\024\040\025" +
    "\037\026\035\027\034\030\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\012\342\013\053\014\052\015" +
    "\051\020\050\021\043\022\042\023\041\024\040\025\037" +
    "\026\035\027\034\030\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\211\007\201\033\177\034\210" +
    "\037\204\042\345\043\213\044\215\045\203\046\216\050" +
    "\202\062\205\001\001\000\002\001\001\000\006\003\351" +
    "\066\350\001\001\000\006\032\352\045\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\211\007\201\033\177\034\210\037\204\042\355\043" +
    "\213\044\215\045\203\046\216\050\202\062\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\351\066" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\152\041\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


      //Codigo visible

     public void syntax_error(Symbol s){
        Inicio.errorSintacticoJS("Sintactico", ""+s.value, ""+(s.left+1), ""+(s.right+1));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Inicio.errorSintacticoJS("SintacticoNR", ""+s.value, ""+(s.left+1), ""+(s.right+1));
    }

    public void agregarNodoComparacion(NodoComparacion nodo)
    {
        Inicio.agregarNodoComparacion(nodo);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserJS$actions {

//Codigo de acciones


  private final parserJS parser;

  /** Constructor */
  CUP$parserJS$actions(parserJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserJS$do_action_part00000000(
    int                        CUP$parserJS$act_num,
    java_cup.runtime.lr_parser CUP$parserJS$parser,
    java.util.Stack            CUP$parserJS$stack,
    int                        CUP$parserJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserJS$result;

      /* select the action based on the action number */
      switch (CUP$parserJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		RESULT = start_val;
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserJS$parser.done_parsing();
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // EPS ::= 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("EPS",1, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PUNTO_COMA ::= tkPuntoComa 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PUNTO_COMA",28, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PUNTO_COMA ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PUNTO_COMA",28, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= tkClass tkId tkLlaveA CUERPO tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)).value;
		int x3left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x3 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x4left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x4right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x4 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x5left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x5right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x5 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                NodoComparacion nodo = new NodoComparacion();
                                int lineaInicio = x1left+1;
                                int lineaFin = x5left+1;
                                int cantidadLineas = lineaFin - lineaInicio;
                                nodo.setLineasClase(cantidadLineas - 1);
                                nodo.setNombreClase(x2);
                                agregarNodoComparacion(nodo);
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("S",2, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= SENTC_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTC_ ::= SENTC SENTC_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SENTC_",47, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTC_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SENTC_",47, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTC ::= TIPO tkId DECLARACIONES 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                String arrArroba [] = x2.split("@");    //ej: ,id2,id3,id4 @ 3_41
                                if(!arrArroba[1].equalsIgnoreCase("asignacion") && !arrArroba[1].equalsIgnoreCase("null"))
                                {
                                    NodoComparacion nodo = new NodoComparacion();
                                    String cantParam_Lineas [] = arrArroba[1].split("_");
                                    nodo.setNombreFuncion(x1);
                                    nodo.setCantidadParametros(Integer.parseInt(cantParam_Lineas[0]));
                                    nodo.setLineasFuncion(Integer.parseInt(cantParam_Lineas[1]));
                                    agregarNodoComparacion(nodo);
                                }
                                else
                                {
                                    String listaIds [] = arrArroba[0].split(",");
                                    if(listaIds.length > 1)
                                    {
                                        for(int i=1; i<listaIds.length; i++)
                                        {
                                            if(!tipo.equals(""))
                                            {
                                                NodoComparacion nodo = new NodoComparacion();
                                                nodo.setNombreVariable(listaIds[i]);
                                                agregarNodoComparacion(nodo);
                                            }
                                        }
                                    }
                                    if(!tipo.equals(""))
                                    {
                                        NodoComparacion nodo = new NodoComparacion();
                                        nodo.setNombreVariable(x1);
                                        agregarNodoComparacion(nodo);
                                    }
                                }
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SENTC",43, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTC ::= CONSOLE 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SENTC",43, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONSOLE ::= tkConsole tkPunto tkLog tkParentesisA EXP tkParentesisC PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",5, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECLARACIONES ::= L_ID IGUAL PUNTO_COMA 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int cantParam_Lineasleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int cantParam_Lineasright = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String cantParam_Lineas = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		 
                                RESULT = x1 + "@" + cantParam_Lineas; 
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",4, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUAL ::= ASIG 
            {
              String RESULT =null;
		 RESULT = "asignacion"; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IGUAL",0, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUAL ::= tkMas tkMas 
            {
              String RESULT =null;
		 RESULT = "null"; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IGUAL",0, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IGUAL ::= tkMenos tkMenos 
            {
              String RESULT =null;
		 RESULT = "null"; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IGUAL",0, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IGUAL ::= INVOCAR 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IGUAL",0, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= tkLet 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= tkConst 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= tkVar 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("TIPO",29, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INVOCAR ::= tkParentesisA PARAMETRO_SIN tkParentesisC FUNCIONES 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int numLineasleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int numLineasright = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String numLineas = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                String arreglo [] = x1.split(",");
                                String cantidadParametros = "";
                                if(arreglo.length>1)    // hay varios
                                {   
                                    cantidadParametros = String.valueOf(arreglo.length);
                                }
                                else if (arreglo[0].equals(""))     // No hay nada
                                {    
                                    cantidadParametros = "0";
                                }
                                else    // hay 1
                                {   
                                    cantidadParametros = "1";
                                }
                                RESULT = cantidadParametros + "_" + numLineas;
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("INVOCAR",27, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCIONES ::= tkLlaveA F_SENTS tkLlaveC 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                int lineaInicio = x1left+1;
                                //System.out.println("x1left = " + x1left);
                                int lineaFin = x2left+1;
                                //System.out.println("x2left = " + x2left);
                                int totalLineas = lineaFin - lineaInicio ;
                                String totalLineasString = String.valueOf(totalLineas-1);
                                //System.out.println("total Lineas = " + totalLineasString);
                                RESULT = totalLineasString;
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",44, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("FUNCIONES",44, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F_CUERPO ::= TIPO tkId F_DECLARACIONES 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                String listaIds [] = x2.split(",");     // ,id1 - ,id1,id2 - ""
                                if(listaIds.length > 1)
                                {
                                    if(!tipo.equals(""))
                                    {
                                        for(int i = 1; i<listaIds.length; i++)
                                        {
                                            NodoComparacion nodo = new NodoComparacion();
                                            nodo.setNombreVariable(listaIds[i]);
                                            agregarNodoComparacion(nodo);
                                        }
                                    }
                                    
                                    
                                }
                                if(!tipo.equals(""))
                                {
                                    NodoComparacion nodo = new NodoComparacion();
                                    nodo.setNombreVariable(x1);
                                    agregarNodoComparacion(nodo);
                                }
                                
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_CUERPO",48, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F_CUERPO ::= CONSOLE 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_CUERPO",48, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F_DECLARACIONES ::= L_ID F_IGUAL PUNTO_COMA 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_DECLARACIONES",49, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F_IGUAL ::= ASIG 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IGUAL",50, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F_IGUAL ::= tkMas tkMas 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IGUAL",50, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F_IGUAL ::= tkMenos tkMenos 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IGUAL",50, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F_IGUAL ::= F_INVOCAR 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IGUAL",50, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F_INVOCAR ::= tkParentesisA PARAMETRO_SIN tkParentesisC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_INVOCAR",51, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // F_SENTS ::= F_SENTS_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENTS",32, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // F_SENTS_ ::= F_SENT F_SENTS_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENTS_",33, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F_SENTS_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENTS_",33, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F_SENT ::= F_CUERPO 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // F_SENT ::= IF 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // F_SENT ::= DO_WHILE PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // F_SENT ::= WHILE 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // F_SENT ::= FOR 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // F_SENT ::= SWITCH 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // F_SENT ::= tkBreak PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // F_SENT ::= tkReturn EXP PUNTO_COMA 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_SENT",34, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= tkIf tkParentesisA COND tkParentesisC tkLlaveA F_SENTS tkLlaveC F_IF_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IF",35, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // F_IF_ ::= tkElse ELSE 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IF_",52, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // F_IF_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F_IF_",52, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE ::= tkLlaveA F_SENTS tkLlaveC F_IF_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE ::= IF 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("ELSE",24, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DO_WHILE ::= tkDo tkLlaveA F_SENTS tkLlaveC tkWhile tkParentesisA COND tkParentesisC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("DO_WHILE",26, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= tkWhile tkParentesisA COND tkParentesisC tkLlaveA F_SENTS tkLlaveC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("WHILE",25, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= tkFor tkParentesisA COND_FOR tkParentesisC tkLlaveA F_SENTS tkLlaveC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("FOR",36, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH ::= tkSwitch tkParentesisA EXP tkParentesisC tkLlaveA SW_SENTS tkLlaveC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SWITCH",38, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SW_SENTS ::= CASE DEFAULT 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("SW_SENTS",39, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE ::= tkCase EXP tkDosPuntos F_SENTS CASE_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("CASE",40, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASE_ ::= tkCase EXP tkDosPuntos F_SENTS CASE_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("CASE_",41, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASE_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("CASE_",41, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEFAULT ::= tkDefault tkDosPuntos F_SENTS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("DEFAULT",42, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND_FOR ::= TIPO tkId ASIG tkPuntoComa COND tkPuntoComa tkId INCRE_DECRE 
            {
              String RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-6)).value;
		
                                if(!tipo.equals(""))
                                {
                                    NodoComparacion nodo = new NodoComparacion();
                                    nodo.setNombreVariable(x1);
                                    agregarNodoComparacion(nodo);
                                }
                                
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_FOR",37, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INCRE_DECRE ::= tkMas IG_EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",7, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INCRE_DECRE ::= tkMenos IG_EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",7, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INCRE_DECRE ::= tkPor IG_EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",7, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INCRE_DECRE ::= tkIgual EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",7, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IG_EXP ::= tkIgual EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IG_EXP",53, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IG_EXP ::= tkMas 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IG_EXP",53, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IG_EXP ::= tkMenos 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("IG_EXP",53, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_ID ::= L_ID_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("L_ID",30, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // L_ID_ ::= tkComa tkId L_ID_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x3left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x3 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		 RESULT = x1 + x2 + x3; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("L_ID_",31, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // L_ID_ ::= tkPunto tkId L_ID_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("L_ID_",31, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // L_ID_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("L_ID_",31, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIG ::= tkIgual COND 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("ASIG",6, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ASIG ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("ASIG",6, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COND ::= COND tkOr COND_A 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND",8, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND ::= COND_A 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND",8, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND_A ::= COND_A tkAnd COND_B 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_A",9, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COND_A ::= COND_B 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_A",9, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COND_B ::= tkNot COND_C 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_B",10, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COND_B ::= COND_C 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_B",10, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COND_C ::= EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_C",11, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COND_C ::= EXP RELACIONAL EXP 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("COND_C",11, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RELACIONAL ::= tkMayor RELACIONAL_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RELACIONAL ::= tkMenor RELACIONAL_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // RELACIONAL ::= tkIgual tkIgual 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RELACIONAL ::= tkNot tkIgual 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL",12, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // RELACIONAL_ ::= tkIgual 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL_",13, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // RELACIONAL_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("RELACIONAL_",13, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= EXP tkMas A 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= A 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // A ::= A tkMenos B 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("A",15, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // A ::= B 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("A",15, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // B ::= B tkDivision C 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("B",16, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // B ::= C 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("B",16, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // C ::= C tkPor D 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("C",17, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // C ::= D 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("C",17, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // D ::= D tkPorcentaje E 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // D ::= E 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("D",18, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E tkPotencia F 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= F 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("E",19, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= tkMenos G 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= G 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("F",20, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // G ::= tkNumero 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // G ::= tkCadena 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // G ::= tkCaracter 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // G ::= tkTrue 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // G ::= tkFalse 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // G ::= tkNull 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // G ::= tkRequire tkParentesisA tkCadena tkParentesisC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // G ::= tkParentesisA COND tkParentesisC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // G ::= tkCorcheteA PARAMETRO_SIN tkCorcheteC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // G ::= LLAMADA 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("G",21, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LLAMADA ::= tkId LLAMADA_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADA_ ::= tkPunto tkId LLAMADA_ 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("LLAMADA_",23, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA_ ::= tkParentesisA PARAMETRO_SIN tkParentesisC 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("LLAMADA_",23, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA_ ::= EPS 
            {
              String RESULT =null;

              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("LLAMADA_",23, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PARAMETRO_SIN ::= EXP PARAMETRO_SIN2_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                RESULT = x1 + x2;
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SIN",45, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PARAMETRO_SIN ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SIN",45, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PARAMETRO_SIN2_ ::= tkComa EXP PARAMETRO_SIN2_ 
            {
              String RESULT =null;
		int x1left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).right;
		String x1 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)).value;
		int x2left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).left;
		int x2right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).right;
		String x2 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.elementAt(CUP$parserJS$top-1)).value;
		int x3left = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).left;
		int x3right = ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()).right;
		String x3 = (String)((java_cup.runtime.Symbol) CUP$parserJS$stack.peek()).value;
		
                                RESULT = x1 + x2 + x3;
                            
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SIN2_",46, ((java_cup.runtime.Symbol)CUP$parserJS$stack.elementAt(CUP$parserJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PARAMETRO_SIN2_ ::= EPS 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parserJS$result = parser.getSymbolFactory().newSymbol("PARAMETRO_SIN2_",46, ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserJS$stack.peek()), RESULT);
            }
          return CUP$parserJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserJS$do_action(
    int                        CUP$parserJS$act_num,
    java_cup.runtime.lr_parser CUP$parserJS$parser,
    java.util.Stack            CUP$parserJS$stack,
    int                        CUP$parserJS$top)
    throws java.lang.Exception
    {
              return CUP$parserJS$do_action_part00000000(
                               CUP$parserJS$act_num,
                               CUP$parserJS$parser,
                               CUP$parserJS$stack,
                               CUP$parserJS$top);
    }
}

}
