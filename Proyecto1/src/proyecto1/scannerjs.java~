/* The following code was generated by JFlex 1.6.1 */

package proyecto1;
import java_cup.runtime.Symbol;
import proyecto1.Inicio;
import static proyecto1.Inicio.errorLexicoJS;
import static proyecto1.Inicio.agregarTokenJS;
import static proyecto1.Inicio.agregarNodoComparacion;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexicojs.flex</tt>
 */
public class scannerjs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SALTO = 2;
  public static final int COMENTARIO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  7,  9,  8,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    11, 46,  5,  0,  0, 45, 47,  6, 38, 39, 44, 42, 36, 43,  2, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 33, 37, 50, 32, 49,  0, 
     0,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 34,  0, 35,  0,  4, 
     0, 14, 29, 12, 26, 18, 23, 28, 25, 22,  3, 30, 13,  3, 21, 20, 
     3, 31, 17, 15, 19, 27, 16, 24,  3,  3,  3, 40, 48, 41,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\15\4\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\1\27\1\30\1\31\1\0\1\31\1\2"+
    "\1\4\1\0\1\32\1\0\1\33\1\34\13\4\1\35"+
    "\4\4\1\36\1\4\1\37\1\40\1\41\1\31\1\42"+
    "\1\43\3\4\1\44\1\45\1\4\1\46\6\4\1\47"+
    "\4\4\1\50\4\4\1\51\1\52\1\53\4\4\1\54"+
    "\1\55\4\4\1\56\1\57\1\4\1\60\1\4\1\61"+
    "\1\62\2\4\1\63\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\63\0\314\0\377"+
    "\0\u0132\0\63\0\63\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\u042f\0\63\0\63"+
    "\0\u0462\0\u0495\0\63\0\63\0\63\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\377\0\63\0\u0594\0\u05c7\0\63\0\u05fa\0\u062d"+
    "\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\314\0\u082b\0\u085e\0\u0891\0\u08c4\0\314\0\u08f7"+
    "\0\63\0\63\0\63\0\u092a\0\63\0\63\0\u095d\0\u0990"+
    "\0\u09c3\0\314\0\314\0\u09f6\0\314\0\u0a29\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\u0b28\0\314\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4"+
    "\0\314\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\314\0\314\0\314"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\314\0\314\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\314\0\314\0\u0e8b\0\314\0\u0ebe\0\314"+
    "\0\314\0\u0ef1\0\u0f24\0\314\0\314\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\12"+
    "\1\13\1\0\1\14\1\13\1\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\7\1\24\1\25\1\26"+
    "\1\27\1\7\1\30\2\7\1\31\2\7\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\63\0\12\55\1\56\41\55\1\57\6\55\1\0"+
    "\1\5\1\60\61\0\1\61\1\0\2\7\7\0\24\7"+
    "\23\0\5\62\1\63\55\62\7\64\3\0\51\64\12\0"+
    "\1\65\41\0\1\66\7\0\1\61\1\0\2\7\7\0"+
    "\1\7\1\67\1\70\5\7\1\71\13\7\24\0\1\61"+
    "\1\0\2\7\7\0\6\7\1\72\1\7\1\73\13\7"+
    "\24\0\1\61\1\0\2\7\7\0\14\7\1\74\7\7"+
    "\24\0\1\61\1\0\2\7\7\0\2\7\1\75\21\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\76\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\1\7\1\77\22\7"+
    "\24\0\1\61\1\0\2\7\7\0\5\7\1\100\16\7"+
    "\24\0\1\61\1\0\2\7\7\0\17\7\1\101\4\7"+
    "\24\0\1\61\1\0\2\7\7\0\13\7\1\102\10\7"+
    "\24\0\1\61\1\0\2\7\7\0\2\7\1\103\5\7"+
    "\1\104\13\7\24\0\1\61\1\0\2\7\7\0\15\7"+
    "\1\105\6\7\24\0\1\61\1\0\2\7\7\0\6\7"+
    "\1\106\1\7\1\107\13\7\24\0\1\61\1\0\2\7"+
    "\7\0\5\7\1\110\16\7\77\0\1\111\65\0\1\112"+
    "\63\0\1\113\14\0\1\114\62\0\1\115\51\0\1\60"+
    "\62\0\1\61\3\7\7\0\24\7\31\0\1\116\54\0"+
    "\7\65\3\0\51\65\1\0\1\61\1\0\2\7\7\0"+
    "\2\7\1\117\21\7\24\0\1\61\1\0\2\7\7\0"+
    "\3\7\1\120\20\7\24\0\1\61\1\0\2\7\7\0"+
    "\11\7\1\121\12\7\24\0\1\61\1\0\2\7\7\0"+
    "\7\7\1\122\14\7\24\0\1\61\1\0\2\7\7\0"+
    "\20\7\1\123\3\7\24\0\1\61\1\0\2\7\7\0"+
    "\12\7\1\124\11\7\24\0\1\61\1\0\2\7\7\0"+
    "\5\7\1\125\16\7\24\0\1\61\1\0\2\7\7\0"+
    "\7\7\1\126\13\7\1\127\24\0\1\61\1\0\2\7"+
    "\7\0\3\7\1\130\20\7\24\0\1\61\1\0\2\7"+
    "\7\0\17\7\1\131\4\7\24\0\1\61\1\0\2\7"+
    "\7\0\1\7\1\132\22\7\24\0\1\61\1\0\2\7"+
    "\7\0\1\7\1\133\22\7\24\0\1\61\1\0\2\7"+
    "\7\0\5\7\1\134\16\7\24\0\1\61\1\0\2\7"+
    "\7\0\12\7\1\135\11\7\24\0\1\61\1\0\2\7"+
    "\7\0\13\7\1\136\10\7\24\0\1\61\1\0\2\7"+
    "\7\0\6\7\1\137\15\7\23\0\7\114\3\0\51\114"+
    "\1\0\1\61\1\0\2\7\7\0\3\7\1\140\20\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\141\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\3\7\1\142\20\7"+
    "\24\0\1\61\1\0\2\7\7\0\7\7\1\143\14\7"+
    "\24\0\1\61\1\0\2\7\7\0\17\7\1\144\4\7"+
    "\24\0\1\61\1\0\2\7\7\0\17\7\1\145\4\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\146\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\147\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\1\7\1\150\22\7"+
    "\24\0\1\61\1\0\2\7\7\0\3\7\1\151\20\7"+
    "\24\0\1\61\1\0\2\7\7\0\1\7\1\152\22\7"+
    "\24\0\1\61\1\0\2\7\7\0\2\7\1\153\21\7"+
    "\24\0\1\61\1\0\2\7\7\0\2\7\1\154\21\7"+
    "\24\0\1\61\1\0\2\7\7\0\3\7\1\155\20\7"+
    "\24\0\1\61\1\0\2\7\7\0\7\7\1\156\1\157"+
    "\13\7\24\0\1\61\1\0\2\7\7\0\1\160\23\7"+
    "\24\0\1\61\1\0\2\7\7\0\5\7\1\161\16\7"+
    "\24\0\1\61\1\0\2\7\7\0\12\7\1\162\11\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\163\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\164\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\17\7\1\165\4\7"+
    "\24\0\1\61\1\0\2\7\7\0\22\7\1\166\1\7"+
    "\24\0\1\61\1\0\2\7\7\0\1\7\1\167\22\7"+
    "\24\0\1\61\1\0\2\7\7\0\15\7\1\170\6\7"+
    "\24\0\1\61\1\0\2\7\7\0\11\7\1\171\12\7"+
    "\24\0\1\61\1\0\2\7\7\0\5\7\1\172\16\7"+
    "\24\0\1\61\1\0\2\7\7\0\1\7\1\173\22\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\174\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\6\7\1\175\15\7"+
    "\24\0\1\61\1\0\2\7\7\0\7\7\1\176\14\7"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3927];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\0\1\11\1\1\1\11\3\1\2\11"+
    "\16\1\14\11\1\1\2\11\2\1\3\11\1\0\3\1"+
    "\1\0\1\11\1\0\1\1\1\11\22\1\3\11\1\1"+
    "\2\11\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de usuario
    String cadenaComentario = "";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerjs(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline)+" y columna: "+yycolumn;
        String error = "" + yytext();
        String errorLinea = "" + (yyline+1);
        String errorColumna = "" + (yycolumn+1);
        errorLexicoJS("Lexico", error, yyline+1, yycolumn+1);
        //System.out.println(errLex);
            }
          case 54: break;
          case 2: 
            { agregarTokenJS("tkNumero", yytext(), yyline, yycolumn);		return new Symbol(symJS.tkNumero, yyline, yycolumn, yytext());
            }
          case 55: break;
          case 3: 
            { agregarTokenJS("tkPunto", yytext(), yyline, yycolumn);          return new Symbol(symJS.tkPunto, yyline, yycolumn, yytext());
            }
          case 56: break;
          case 4: 
            { agregarTokenJS("tkId", yytext(), yyline, yycolumn);			return new Symbol(symJS.tkId, yyline, yycolumn, yytext());
            }
          case 57: break;
          case 5: 
            { /*Saltos de linea, ignorados*/
            }
          case 58: break;
          case 6: 
            { /*Espacios en blanco, ignorados*/
            }
          case 59: break;
          case 7: 
            { agregarTokenJS("tkDivision", yytext(), yyline, yycolumn);       return new Symbol(symJS.tkDivision, yyline, yycolumn, yytext());
            }
          case 60: break;
          case 8: 
            { agregarTokenJS("tkIgual", yytext(), yyline, yycolumn);		  return new Symbol(symJS.tkIgual, yyline, yycolumn, yytext());
            }
          case 61: break;
          case 9: 
            { agregarTokenJS("tkDosPuntos", yytext(), yyline, yycolumn);	  return new Symbol(symJS.tkDosPuntos, yyline, yycolumn, yytext());
            }
          case 62: break;
          case 10: 
            { agregarTokenJS("tkCorcheteA", yytext(), yyline, yycolumn);	  return new Symbol(symJS.tkCorcheteA, yyline, yycolumn, yytext());
            }
          case 63: break;
          case 11: 
            { agregarTokenJS("tkCorcheteC", yytext(), yyline, yycolumn);	  return new Symbol(symJS.tkCorcheteC, yyline, yycolumn, yytext());
            }
          case 64: break;
          case 12: 
            { agregarTokenJS("tkComa", yytext(), yyline, yycolumn);			  return new Symbol(symJS.tkComa, yyline, yycolumn, yytext());
            }
          case 65: break;
          case 13: 
            { agregarTokenJS("tkPuntoComa", yytext(), yyline, yycolumn);	  return new Symbol(symJS.tkPuntoComa, yyline, yycolumn, yytext());
            }
          case 66: break;
          case 14: 
            { agregarTokenJS("tkParentesisA", yytext(), yyline, yycolumn);    return new Symbol(symJS.tkParentesisA, yyline, yycolumn, yytext());
            }
          case 67: break;
          case 15: 
            { agregarTokenJS("tkParentesisC", yytext(), yyline, yycolumn);    return new Symbol(symJS.tkParentesisC, yyline, yycolumn, yytext());
            }
          case 68: break;
          case 16: 
            { agregarTokenJS("tkLlaveA", yytext(), yyline, yycolumn);         return new Symbol(symJS.tkLlaveA, yyline, yycolumn, yytext());
            }
          case 69: break;
          case 17: 
            { agregarTokenJS("tkLlaveC", yytext(), yyline, yycolumn);         return new Symbol(symJS.tkLlaveC, yyline, yycolumn, yytext());
            }
          case 70: break;
          case 18: 
            { agregarTokenJS("tkMas", yytext(), yyline, yycolumn);            return new Symbol(symJS.tkMas, yyline, yycolumn, yytext());
            }
          case 71: break;
          case 19: 
            { agregarTokenJS("tkMenos", yytext(), yyline, yycolumn);          return new Symbol(symJS.tkMenos, yyline, yycolumn, yytext());
            }
          case 72: break;
          case 20: 
            { agregarTokenJS("tkPor", yytext(), yyline, yycolumn);            return new Symbol(symJS.tkPor, yyline, yycolumn, yytext());
            }
          case 73: break;
          case 21: 
            { agregarTokenJS("tkPorcentaje", yytext(), yyline, yycolumn);     return new Symbol(symJS.tkPorcentaje, yyline, yycolumn, yytext());
            }
          case 74: break;
          case 22: 
            { agregarTokenJS("tkNot", yytext(), yyline, yycolumn);            return new Symbol(symJS.tkNot, yyline, yycolumn, yytext());
            }
          case 75: break;
          case 23: 
            { agregarTokenJS("tkMayor", yytext(), yyline, yycolumn);          return new Symbol(symJS.tkMayor, yyline, yycolumn, yytext());
            }
          case 76: break;
          case 24: 
            { agregarTokenJS("tkMenor", yytext(), yyline, yycolumn);          return new Symbol(symJS.tkMenor, yyline, yycolumn, yytext());
            }
          case 77: break;
          case 25: 
            { cadenaComentario += yytext();
            }
          case 78: break;
          case 26: 
            { agregarTokenJS("tkCadena", yytext(), yyline, yycolumn);		return new Symbol(symJS.tkCadena, yyline, yycolumn, yytext());
            }
          case 79: break;
          case 27: 
            { NodoComparacion nodo = new NodoComparacion(); nodo.setComentarioUniLinea(yytext()); agregarNodoComparacion(nodo);
            }
          case 80: break;
          case 28: 
            { yybegin(COMENTARIO);
            }
          case 81: break;
          case 29: 
            { agregarTokenJS("tkIf", yytext(), yyline, yycolumn);                         return new Symbol(symJS.tkIf, yyline, yycolumn, yytext());
            }
          case 82: break;
          case 30: 
            { agregarTokenJS("tkDo", yytext(), yyline, yycolumn);                         return new Symbol(symJS.tkDo, yyline, yycolumn, yytext());
            }
          case 83: break;
          case 31: 
            { agregarTokenJS("tkPotencia", yytext(), yyline, yycolumn);       return new Symbol(symJS.tkPotencia, yyline, yycolumn, yytext());
            }
          case 84: break;
          case 32: 
            { agregarTokenJS("tkAnd", yytext(), yyline, yycolumn);            return new Symbol(symJS.tkAnd, yyline, yycolumn, yytext());
            }
          case 85: break;
          case 33: 
            { agregarTokenJS("tkOr", yytext(), yyline, yycolumn);             return new Symbol(symJS.tkOr, yyline, yycolumn, yytext());
            }
          case 86: break;
          case 34: 
            { String tempTxt = cadenaComentario; cadenaComentario = ""; NodoComparacion nodo = new NodoComparacion(); nodo.setComentarioMultiLinea(tempTxt); agregarNodoComparacion(nodo); yybegin(YYINITIAL);
            }
          case 87: break;
          case 35: 
            { agregarTokenJS("tkCaracter", yytext(), yyline, yycolumn);     return new Symbol(symJS.tkCaracter, yyline, yycolumn, yytext());
            }
          case 88: break;
          case 36: 
            { agregarTokenJS("tkLet", yytext(), yyline, yycolumn);                        return new Symbol(symJS.tkLet, yyline, yycolumn, yytext());
            }
          case 89: break;
          case 37: 
            { agregarTokenJS("tkLog", yytext(), yyline, yycolumn);                        return new Symbol(symJS.tkLog, yyline, yycolumn, yytext());
            }
          case 90: break;
          case 38: 
            { agregarTokenJS("tkVar", yytext(), yyline, yycolumn);                        return new Symbol(symJS.tkVar, yyline, yycolumn, yytext());
            }
          case 91: break;
          case 39: 
            { agregarTokenJS("tkFor", yytext(), yyline, yycolumn);                        return new Symbol(symJS.tkFor, yyline, yycolumn, yytext());
            }
          case 92: break;
          case 40: 
            { agregarTokenJS("tkCase", yytext(), yyline, yycolumn);                       return new Symbol(symJS.tkCase, yyline, yycolumn, yytext());
            }
          case 93: break;
          case 41: 
            { agregarTokenJS("tkElse", yytext(), yyline, yycolumn);                       return new Symbol(symJS.tkElse, yyline, yycolumn, yytext());
            }
          case 94: break;
          case 42: 
            { agregarTokenJS("tkTrue", yytext(), yyline, yycolumn);                       return new Symbol(symJS.tkTrue, yyline, yycolumn, yytext());
            }
          case 95: break;
          case 43: 
            { agregarTokenJS("tkNull", yytext(), yyline, yycolumn);                       return new Symbol(symJS.tkNull, yyline, yycolumn, yytext());
            }
          case 96: break;
          case 44: 
            { agregarTokenJS("tkClass", yytext(), yyline, yycolumn);			          return new Symbol(symJS.tkClass, yyline, yycolumn, yytext());
            }
          case 97: break;
          case 45: 
            { agregarTokenJS("tkConst", yytext(), yyline, yycolumn);                      return new Symbol(symJS.tkConst, yyline, yycolumn, yytext());
            }
          case 98: break;
          case 46: 
            { agregarTokenJS("tkFalse", yytext(), yyline, yycolumn);                      return new Symbol(symJS.tkFalse, yyline, yycolumn, yytext());
            }
          case 99: break;
          case 47: 
            { agregarTokenJS("tkWhile", yytext(), yyline, yycolumn);                      return new Symbol(symJS.tkWhile, yyline, yycolumn, yytext());
            }
          case 100: break;
          case 48: 
            { agregarTokenJS("tkBreak", yytext(), yyline, yycolumn);                      return new Symbol(symJS.tkBreak, yyline, yycolumn, yytext());
            }
          case 101: break;
          case 49: 
            { agregarTokenJS("tkSwitch", yytext(), yyline, yycolumn);                     return new Symbol(symJS.tkSwitch, yyline, yycolumn, yytext());
            }
          case 102: break;
          case 50: 
            { agregarTokenJS("tkReturn", yytext(), yyline, yycolumn);                      return new Symbol(symJS.tkReturn, yyline, yycolumn, yytext());
            }
          case 103: break;
          case 51: 
            { agregarTokenJS("tkConsole", yytext(), yyline, yycolumn);                    return new Symbol(symJS.tkConsole, yyline, yycolumn, yytext());
            }
          case 104: break;
          case 52: 
            { agregarTokenJS("tkRequire", yytext(), yyline, yycolumn);                    return new Symbol(symJS.tkRequire, yyline, yycolumn, yytext());
            }
          case 105: break;
          case 53: 
            { agregarTokenJS("tkDefault", yytext(), yyline, yycolumn);                    return new Symbol(symJS.tkDefault, yyline, yycolumn, yytext());
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
